// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: api.proto

package aioesphomeapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LegacyCoverState int32

const (
	LegacyCoverState_LEGACY_COVER_STATE_OPEN   LegacyCoverState = 0
	LegacyCoverState_LEGACY_COVER_STATE_CLOSED LegacyCoverState = 1
)

// Enum value maps for LegacyCoverState.
var (
	LegacyCoverState_name = map[int32]string{
		0: "LEGACY_COVER_STATE_OPEN",
		1: "LEGACY_COVER_STATE_CLOSED",
	}
	LegacyCoverState_value = map[string]int32{
		"LEGACY_COVER_STATE_OPEN":   0,
		"LEGACY_COVER_STATE_CLOSED": 1,
	}
)

func (x LegacyCoverState) Enum() *LegacyCoverState {
	p := new(LegacyCoverState)
	*p = x
	return p
}

func (x LegacyCoverState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyCoverState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (LegacyCoverState) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x LegacyCoverState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyCoverState.Descriptor instead.
func (LegacyCoverState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type CoverOperation int32

const (
	CoverOperation_COVER_OPERATION_IDLE       CoverOperation = 0
	CoverOperation_COVER_OPERATION_IS_OPENING CoverOperation = 1
	CoverOperation_COVER_OPERATION_IS_CLOSING CoverOperation = 2
)

// Enum value maps for CoverOperation.
var (
	CoverOperation_name = map[int32]string{
		0: "COVER_OPERATION_IDLE",
		1: "COVER_OPERATION_IS_OPENING",
		2: "COVER_OPERATION_IS_CLOSING",
	}
	CoverOperation_value = map[string]int32{
		"COVER_OPERATION_IDLE":       0,
		"COVER_OPERATION_IS_OPENING": 1,
		"COVER_OPERATION_IS_CLOSING": 2,
	}
)

func (x CoverOperation) Enum() *CoverOperation {
	p := new(CoverOperation)
	*p = x
	return p
}

func (x CoverOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoverOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (CoverOperation) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x CoverOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoverOperation.Descriptor instead.
func (CoverOperation) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type LegacyCoverCommand int32

const (
	LegacyCoverCommand_LEGACY_COVER_COMMAND_OPEN  LegacyCoverCommand = 0
	LegacyCoverCommand_LEGACY_COVER_COMMAND_CLOSE LegacyCoverCommand = 1
	LegacyCoverCommand_LEGACY_COVER_COMMAND_STOP  LegacyCoverCommand = 2
)

// Enum value maps for LegacyCoverCommand.
var (
	LegacyCoverCommand_name = map[int32]string{
		0: "LEGACY_COVER_COMMAND_OPEN",
		1: "LEGACY_COVER_COMMAND_CLOSE",
		2: "LEGACY_COVER_COMMAND_STOP",
	}
	LegacyCoverCommand_value = map[string]int32{
		"LEGACY_COVER_COMMAND_OPEN":  0,
		"LEGACY_COVER_COMMAND_CLOSE": 1,
		"LEGACY_COVER_COMMAND_STOP":  2,
	}
)

func (x LegacyCoverCommand) Enum() *LegacyCoverCommand {
	p := new(LegacyCoverCommand)
	*p = x
	return p
}

func (x LegacyCoverCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegacyCoverCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (LegacyCoverCommand) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x LegacyCoverCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegacyCoverCommand.Descriptor instead.
func (LegacyCoverCommand) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type FanSpeed int32

const (
	FanSpeed_FAN_SPEED_LOW    FanSpeed = 0
	FanSpeed_FAN_SPEED_MEDIUM FanSpeed = 1
	FanSpeed_FAN_SPEED_HIGH   FanSpeed = 2
)

// Enum value maps for FanSpeed.
var (
	FanSpeed_name = map[int32]string{
		0: "FAN_SPEED_LOW",
		1: "FAN_SPEED_MEDIUM",
		2: "FAN_SPEED_HIGH",
	}
	FanSpeed_value = map[string]int32{
		"FAN_SPEED_LOW":    0,
		"FAN_SPEED_MEDIUM": 1,
		"FAN_SPEED_HIGH":   2,
	}
)

func (x FanSpeed) Enum() *FanSpeed {
	p := new(FanSpeed)
	*p = x
	return p
}

func (x FanSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (FanSpeed) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x FanSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanSpeed.Descriptor instead.
func (FanSpeed) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

type FanDirection int32

const (
	FanDirection_FAN_DIRECTION_FORWARD FanDirection = 0
	FanDirection_FAN_DIRECTION_REVERSE FanDirection = 1
)

// Enum value maps for FanDirection.
var (
	FanDirection_name = map[int32]string{
		0: "FAN_DIRECTION_FORWARD",
		1: "FAN_DIRECTION_REVERSE",
	}
	FanDirection_value = map[string]int32{
		"FAN_DIRECTION_FORWARD": 0,
		"FAN_DIRECTION_REVERSE": 1,
	}
)

func (x FanDirection) Enum() *FanDirection {
	p := new(FanDirection)
	*p = x
	return p
}

func (x FanDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (FanDirection) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x FanDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanDirection.Descriptor instead.
func (FanDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

// ==================== SENSOR ====================
type SensorStateClass int32

const (
	SensorStateClass_STATE_CLASS_NONE             SensorStateClass = 0
	SensorStateClass_STATE_CLASS_MEASUREMENT      SensorStateClass = 1
	SensorStateClass_STATE_CLASS_TOTAL_INCREASING SensorStateClass = 2
)

// Enum value maps for SensorStateClass.
var (
	SensorStateClass_name = map[int32]string{
		0: "STATE_CLASS_NONE",
		1: "STATE_CLASS_MEASUREMENT",
		2: "STATE_CLASS_TOTAL_INCREASING",
	}
	SensorStateClass_value = map[string]int32{
		"STATE_CLASS_NONE":             0,
		"STATE_CLASS_MEASUREMENT":      1,
		"STATE_CLASS_TOTAL_INCREASING": 2,
	}
)

func (x SensorStateClass) Enum() *SensorStateClass {
	p := new(SensorStateClass)
	*p = x
	return p
}

func (x SensorStateClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorStateClass) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (SensorStateClass) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x SensorStateClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorStateClass.Descriptor instead.
func (SensorStateClass) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

type SensorLastResetType int32

const (
	SensorLastResetType_LAST_RESET_NONE  SensorLastResetType = 0
	SensorLastResetType_LAST_RESET_NEVER SensorLastResetType = 1
	SensorLastResetType_LAST_RESET_AUTO  SensorLastResetType = 2
)

// Enum value maps for SensorLastResetType.
var (
	SensorLastResetType_name = map[int32]string{
		0: "LAST_RESET_NONE",
		1: "LAST_RESET_NEVER",
		2: "LAST_RESET_AUTO",
	}
	SensorLastResetType_value = map[string]int32{
		"LAST_RESET_NONE":  0,
		"LAST_RESET_NEVER": 1,
		"LAST_RESET_AUTO":  2,
	}
)

func (x SensorLastResetType) Enum() *SensorLastResetType {
	p := new(SensorLastResetType)
	*p = x
	return p
}

func (x SensorLastResetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorLastResetType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (SensorLastResetType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x SensorLastResetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorLastResetType.Descriptor instead.
func (SensorLastResetType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

// ==================== SUBSCRIBE LOGS ====================
type LogLevel int32

const (
	LogLevel_LOG_LEVEL_NONE         LogLevel = 0
	LogLevel_LOG_LEVEL_ERROR        LogLevel = 1
	LogLevel_LOG_LEVEL_WARN         LogLevel = 2
	LogLevel_LOG_LEVEL_INFO         LogLevel = 3
	LogLevel_LOG_LEVEL_CONFIG       LogLevel = 4
	LogLevel_LOG_LEVEL_DEBUG        LogLevel = 5
	LogLevel_LOG_LEVEL_VERBOSE      LogLevel = 6
	LogLevel_LOG_LEVEL_VERY_VERBOSE LogLevel = 7
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_NONE",
		1: "LOG_LEVEL_ERROR",
		2: "LOG_LEVEL_WARN",
		3: "LOG_LEVEL_INFO",
		4: "LOG_LEVEL_CONFIG",
		5: "LOG_LEVEL_DEBUG",
		6: "LOG_LEVEL_VERBOSE",
		7: "LOG_LEVEL_VERY_VERBOSE",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_NONE":         0,
		"LOG_LEVEL_ERROR":        1,
		"LOG_LEVEL_WARN":         2,
		"LOG_LEVEL_INFO":         3,
		"LOG_LEVEL_CONFIG":       4,
		"LOG_LEVEL_DEBUG":        5,
		"LOG_LEVEL_VERBOSE":      6,
		"LOG_LEVEL_VERY_VERBOSE": 7,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[7].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[7]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

// ==================== USER-DEFINES SERVICES ====================
type ServiceArgType int32

const (
	ServiceArgType_SERVICE_ARG_TYPE_BOOL         ServiceArgType = 0
	ServiceArgType_SERVICE_ARG_TYPE_INT          ServiceArgType = 1
	ServiceArgType_SERVICE_ARG_TYPE_FLOAT        ServiceArgType = 2
	ServiceArgType_SERVICE_ARG_TYPE_STRING       ServiceArgType = 3
	ServiceArgType_SERVICE_ARG_TYPE_BOOL_ARRAY   ServiceArgType = 4
	ServiceArgType_SERVICE_ARG_TYPE_INT_ARRAY    ServiceArgType = 5
	ServiceArgType_SERVICE_ARG_TYPE_FLOAT_ARRAY  ServiceArgType = 6
	ServiceArgType_SERVICE_ARG_TYPE_STRING_ARRAY ServiceArgType = 7
)

// Enum value maps for ServiceArgType.
var (
	ServiceArgType_name = map[int32]string{
		0: "SERVICE_ARG_TYPE_BOOL",
		1: "SERVICE_ARG_TYPE_INT",
		2: "SERVICE_ARG_TYPE_FLOAT",
		3: "SERVICE_ARG_TYPE_STRING",
		4: "SERVICE_ARG_TYPE_BOOL_ARRAY",
		5: "SERVICE_ARG_TYPE_INT_ARRAY",
		6: "SERVICE_ARG_TYPE_FLOAT_ARRAY",
		7: "SERVICE_ARG_TYPE_STRING_ARRAY",
	}
	ServiceArgType_value = map[string]int32{
		"SERVICE_ARG_TYPE_BOOL":         0,
		"SERVICE_ARG_TYPE_INT":          1,
		"SERVICE_ARG_TYPE_FLOAT":        2,
		"SERVICE_ARG_TYPE_STRING":       3,
		"SERVICE_ARG_TYPE_BOOL_ARRAY":   4,
		"SERVICE_ARG_TYPE_INT_ARRAY":    5,
		"SERVICE_ARG_TYPE_FLOAT_ARRAY":  6,
		"SERVICE_ARG_TYPE_STRING_ARRAY": 7,
	}
)

func (x ServiceArgType) Enum() *ServiceArgType {
	p := new(ServiceArgType)
	*p = x
	return p
}

func (x ServiceArgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceArgType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[8].Descriptor()
}

func (ServiceArgType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[8]
}

func (x ServiceArgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceArgType.Descriptor instead.
func (ServiceArgType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

// ==================== CLIMATE ====================
type ClimateMode int32

const (
	ClimateMode_CLIMATE_MODE_OFF       ClimateMode = 0
	ClimateMode_CLIMATE_MODE_HEAT_COOL ClimateMode = 1
	ClimateMode_CLIMATE_MODE_COOL      ClimateMode = 2
	ClimateMode_CLIMATE_MODE_HEAT      ClimateMode = 3
	ClimateMode_CLIMATE_MODE_FAN_ONLY  ClimateMode = 4
	ClimateMode_CLIMATE_MODE_DRY       ClimateMode = 5
	ClimateMode_CLIMATE_MODE_AUTO      ClimateMode = 6
)

// Enum value maps for ClimateMode.
var (
	ClimateMode_name = map[int32]string{
		0: "CLIMATE_MODE_OFF",
		1: "CLIMATE_MODE_HEAT_COOL",
		2: "CLIMATE_MODE_COOL",
		3: "CLIMATE_MODE_HEAT",
		4: "CLIMATE_MODE_FAN_ONLY",
		5: "CLIMATE_MODE_DRY",
		6: "CLIMATE_MODE_AUTO",
	}
	ClimateMode_value = map[string]int32{
		"CLIMATE_MODE_OFF":       0,
		"CLIMATE_MODE_HEAT_COOL": 1,
		"CLIMATE_MODE_COOL":      2,
		"CLIMATE_MODE_HEAT":      3,
		"CLIMATE_MODE_FAN_ONLY":  4,
		"CLIMATE_MODE_DRY":       5,
		"CLIMATE_MODE_AUTO":      6,
	}
)

func (x ClimateMode) Enum() *ClimateMode {
	p := new(ClimateMode)
	*p = x
	return p
}

func (x ClimateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[9].Descriptor()
}

func (ClimateMode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[9]
}

func (x ClimateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateMode.Descriptor instead.
func (ClimateMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

type ClimateFanMode int32

const (
	ClimateFanMode_CLIMATE_FAN_ON      ClimateFanMode = 0
	ClimateFanMode_CLIMATE_FAN_OFF     ClimateFanMode = 1
	ClimateFanMode_CLIMATE_FAN_AUTO    ClimateFanMode = 2
	ClimateFanMode_CLIMATE_FAN_LOW     ClimateFanMode = 3
	ClimateFanMode_CLIMATE_FAN_MEDIUM  ClimateFanMode = 4
	ClimateFanMode_CLIMATE_FAN_HIGH    ClimateFanMode = 5
	ClimateFanMode_CLIMATE_FAN_MIDDLE  ClimateFanMode = 6
	ClimateFanMode_CLIMATE_FAN_FOCUS   ClimateFanMode = 7
	ClimateFanMode_CLIMATE_FAN_DIFFUSE ClimateFanMode = 8
)

// Enum value maps for ClimateFanMode.
var (
	ClimateFanMode_name = map[int32]string{
		0: "CLIMATE_FAN_ON",
		1: "CLIMATE_FAN_OFF",
		2: "CLIMATE_FAN_AUTO",
		3: "CLIMATE_FAN_LOW",
		4: "CLIMATE_FAN_MEDIUM",
		5: "CLIMATE_FAN_HIGH",
		6: "CLIMATE_FAN_MIDDLE",
		7: "CLIMATE_FAN_FOCUS",
		8: "CLIMATE_FAN_DIFFUSE",
	}
	ClimateFanMode_value = map[string]int32{
		"CLIMATE_FAN_ON":      0,
		"CLIMATE_FAN_OFF":     1,
		"CLIMATE_FAN_AUTO":    2,
		"CLIMATE_FAN_LOW":     3,
		"CLIMATE_FAN_MEDIUM":  4,
		"CLIMATE_FAN_HIGH":    5,
		"CLIMATE_FAN_MIDDLE":  6,
		"CLIMATE_FAN_FOCUS":   7,
		"CLIMATE_FAN_DIFFUSE": 8,
	}
)

func (x ClimateFanMode) Enum() *ClimateFanMode {
	p := new(ClimateFanMode)
	*p = x
	return p
}

func (x ClimateFanMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateFanMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[10].Descriptor()
}

func (ClimateFanMode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[10]
}

func (x ClimateFanMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateFanMode.Descriptor instead.
func (ClimateFanMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

type ClimateSwingMode int32

const (
	ClimateSwingMode_CLIMATE_SWING_OFF        ClimateSwingMode = 0
	ClimateSwingMode_CLIMATE_SWING_BOTH       ClimateSwingMode = 1
	ClimateSwingMode_CLIMATE_SWING_VERTICAL   ClimateSwingMode = 2
	ClimateSwingMode_CLIMATE_SWING_HORIZONTAL ClimateSwingMode = 3
)

// Enum value maps for ClimateSwingMode.
var (
	ClimateSwingMode_name = map[int32]string{
		0: "CLIMATE_SWING_OFF",
		1: "CLIMATE_SWING_BOTH",
		2: "CLIMATE_SWING_VERTICAL",
		3: "CLIMATE_SWING_HORIZONTAL",
	}
	ClimateSwingMode_value = map[string]int32{
		"CLIMATE_SWING_OFF":        0,
		"CLIMATE_SWING_BOTH":       1,
		"CLIMATE_SWING_VERTICAL":   2,
		"CLIMATE_SWING_HORIZONTAL": 3,
	}
)

func (x ClimateSwingMode) Enum() *ClimateSwingMode {
	p := new(ClimateSwingMode)
	*p = x
	return p
}

func (x ClimateSwingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateSwingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[11].Descriptor()
}

func (ClimateSwingMode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[11]
}

func (x ClimateSwingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateSwingMode.Descriptor instead.
func (ClimateSwingMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type ClimateAction int32

const (
	ClimateAction_CLIMATE_ACTION_OFF ClimateAction = 0
	// values same as mode for readability
	ClimateAction_CLIMATE_ACTION_COOLING ClimateAction = 2
	ClimateAction_CLIMATE_ACTION_HEATING ClimateAction = 3
	ClimateAction_CLIMATE_ACTION_IDLE    ClimateAction = 4
	ClimateAction_CLIMATE_ACTION_DRYING  ClimateAction = 5
	ClimateAction_CLIMATE_ACTION_FAN     ClimateAction = 6
)

// Enum value maps for ClimateAction.
var (
	ClimateAction_name = map[int32]string{
		0: "CLIMATE_ACTION_OFF",
		2: "CLIMATE_ACTION_COOLING",
		3: "CLIMATE_ACTION_HEATING",
		4: "CLIMATE_ACTION_IDLE",
		5: "CLIMATE_ACTION_DRYING",
		6: "CLIMATE_ACTION_FAN",
	}
	ClimateAction_value = map[string]int32{
		"CLIMATE_ACTION_OFF":     0,
		"CLIMATE_ACTION_COOLING": 2,
		"CLIMATE_ACTION_HEATING": 3,
		"CLIMATE_ACTION_IDLE":    4,
		"CLIMATE_ACTION_DRYING":  5,
		"CLIMATE_ACTION_FAN":     6,
	}
)

func (x ClimateAction) Enum() *ClimateAction {
	p := new(ClimateAction)
	*p = x
	return p
}

func (x ClimateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[12].Descriptor()
}

func (ClimateAction) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[12]
}

func (x ClimateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimateAction.Descriptor instead.
func (ClimateAction) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

type ClimatePreset int32

const (
	ClimatePreset_CLIMATE_PRESET_NONE     ClimatePreset = 0
	ClimatePreset_CLIMATE_PRESET_HOME     ClimatePreset = 1
	ClimatePreset_CLIMATE_PRESET_AWAY     ClimatePreset = 2
	ClimatePreset_CLIMATE_PRESET_BOOST    ClimatePreset = 3
	ClimatePreset_CLIMATE_PRESET_COMFORT  ClimatePreset = 4
	ClimatePreset_CLIMATE_PRESET_ECO      ClimatePreset = 5
	ClimatePreset_CLIMATE_PRESET_SLEEP    ClimatePreset = 6
	ClimatePreset_CLIMATE_PRESET_ACTIVITY ClimatePreset = 7
)

// Enum value maps for ClimatePreset.
var (
	ClimatePreset_name = map[int32]string{
		0: "CLIMATE_PRESET_NONE",
		1: "CLIMATE_PRESET_HOME",
		2: "CLIMATE_PRESET_AWAY",
		3: "CLIMATE_PRESET_BOOST",
		4: "CLIMATE_PRESET_COMFORT",
		5: "CLIMATE_PRESET_ECO",
		6: "CLIMATE_PRESET_SLEEP",
		7: "CLIMATE_PRESET_ACTIVITY",
	}
	ClimatePreset_value = map[string]int32{
		"CLIMATE_PRESET_NONE":     0,
		"CLIMATE_PRESET_HOME":     1,
		"CLIMATE_PRESET_AWAY":     2,
		"CLIMATE_PRESET_BOOST":    3,
		"CLIMATE_PRESET_COMFORT":  4,
		"CLIMATE_PRESET_ECO":      5,
		"CLIMATE_PRESET_SLEEP":    6,
		"CLIMATE_PRESET_ACTIVITY": 7,
	}
)

func (x ClimatePreset) Enum() *ClimatePreset {
	p := new(ClimatePreset)
	*p = x
	return p
}

func (x ClimatePreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClimatePreset) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[13].Descriptor()
}

func (ClimatePreset) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[13]
}

func (x ClimatePreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClimatePreset.Descriptor instead.
func (ClimatePreset) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

// Message sent at the beginning of each connection
// Can only be sent by the client and only at the beginning of the connection
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of client (like User Agent)
	// For example "Home Assistant"
	// Not strictly necessary to send but nice for debugging
	// purposes.
	ClientInfo string `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetClientInfo() string {
	if x != nil {
		return x.ClientInfo
	}
	return ""
}

// Confirmation of successful connection request.
// Can only be sent by the server and only at the beginning of the connection
type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the API to use. The _client_ (for example Home Assistant) needs to check
	// for compatibility and if necessary adopt to an older API.
	// Major is for breaking changes in the base protocol - a mismatch will lead to immediate disconnect_client_
	// Minor is for breaking changes in individual messages - a mismatch will lead to a warning message
	ApiVersionMajor uint32 `protobuf:"varint,1,opt,name=api_version_major,json=apiVersionMajor,proto3" json:"api_version_major,omitempty"`
	ApiVersionMinor uint32 `protobuf:"varint,2,opt,name=api_version_minor,json=apiVersionMinor,proto3" json:"api_version_minor,omitempty"`
	// A string identifying the server (ESP); like client info this may be empty
	// and only exists for debugging/logging purposes.
	// For example "ESPHome v1.10.0 on ESP8266"
	ServerInfo string `protobuf:"bytes,3,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetApiVersionMajor() uint32 {
	if x != nil {
		return x.ApiVersionMajor
	}
	return 0
}

func (x *HelloResponse) GetApiVersionMinor() uint32 {
	if x != nil {
		return x.ApiVersionMinor
	}
	return 0
}

func (x *HelloResponse) GetServerInfo() string {
	if x != nil {
		return x.ServerInfo
	}
	return ""
}

// Message sent at the beginning of each connection to authenticate the client
// Can only be sent by the client and only at the beginning of the connection
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The password to log in with
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Confirmation of successful connection. After this the connection is available for all traffic.
// Can only be sent by the server and only at the beginning of the connection
type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidPassword bool `protobuf:"varint,1,opt,name=invalid_password,json=invalidPassword,proto3" json:"invalid_password,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectResponse) GetInvalidPassword() bool {
	if x != nil {
		return x.InvalidPassword
	}
	return false
}

// Request to close the connection.
// Can be sent by both the client and server
type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

type DeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceInfoRequest) Reset() {
	*x = DeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoRequest) ProtoMessage() {}

func (x *DeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*DeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

type DeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsesPassword bool `protobuf:"varint,1,opt,name=uses_password,json=usesPassword,proto3" json:"uses_password,omitempty"`
	// The name of the node, given by "App.set_name()"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The mac address of the device. For example "AC:BC:32:89:0E:A9"
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// A string describing the ESPHome version. For example "1.10.0"
	EsphomeVersion string `protobuf:"bytes,4,opt,name=esphome_version,json=esphomeVersion,proto3" json:"esphome_version,omitempty"`
	// A string describing the date of compilation, this is generated by the compiler
	// and therefore may not be in the same format all the time.
	// If the user isn't using ESPHome, this will also not be set.
	CompilationTime string `protobuf:"bytes,5,opt,name=compilation_time,json=compilationTime,proto3" json:"compilation_time,omitempty"`
	// The model of the board. For example NodeMCU
	Model        string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	HasDeepSleep bool   `protobuf:"varint,7,opt,name=has_deep_sleep,json=hasDeepSleep,proto3" json:"has_deep_sleep,omitempty"`
	// The esphome project details if set
	ProjectName    string `protobuf:"bytes,8,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ProjectVersion string `protobuf:"bytes,9,opt,name=project_version,json=projectVersion,proto3" json:"project_version,omitempty"`
}

func (x *DeviceInfoResponse) Reset() {
	*x = DeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoResponse) ProtoMessage() {}

func (x *DeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*DeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceInfoResponse) GetUsesPassword() bool {
	if x != nil {
		return x.UsesPassword
	}
	return false
}

func (x *DeviceInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceInfoResponse) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *DeviceInfoResponse) GetEsphomeVersion() string {
	if x != nil {
		return x.EsphomeVersion
	}
	return ""
}

func (x *DeviceInfoResponse) GetCompilationTime() string {
	if x != nil {
		return x.CompilationTime
	}
	return ""
}

func (x *DeviceInfoResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceInfoResponse) GetHasDeepSleep() bool {
	if x != nil {
		return x.HasDeepSleep
	}
	return false
}

func (x *DeviceInfoResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *DeviceInfoResponse) GetProjectVersion() string {
	if x != nil {
		return x.ProjectVersion
	}
	return ""
}

type ListEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListEntitiesRequest) Reset() {
	*x = ListEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesRequest) ProtoMessage() {}

func (x *ListEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesRequest.ProtoReflect.Descriptor instead.
func (*ListEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

type ListEntitiesDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListEntitiesDoneResponse) Reset() {
	*x = ListEntitiesDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesDoneResponse) ProtoMessage() {}

func (x *ListEntitiesDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesDoneResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesDoneResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type SubscribeStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStatesRequest) Reset() {
	*x = SubscribeStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatesRequest) ProtoMessage() {}

func (x *SubscribeStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

// ==================== BINARY SENSOR ====================
type ListEntitiesBinarySensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId             string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key                  uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                 string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId             string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	DeviceClass          string `protobuf:"bytes,5,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	IsStatusBinarySensor bool   `protobuf:"varint,6,opt,name=is_status_binary_sensor,json=isStatusBinarySensor,proto3" json:"is_status_binary_sensor,omitempty"`
	DisabledByDefault    bool   `protobuf:"varint,7,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesBinarySensorResponse) Reset() {
	*x = ListEntitiesBinarySensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesBinarySensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesBinarySensorResponse) ProtoMessage() {}

func (x *ListEntitiesBinarySensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesBinarySensorResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesBinarySensorResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *ListEntitiesBinarySensorResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesBinarySensorResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesBinarySensorResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesBinarySensorResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesBinarySensorResponse) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *ListEntitiesBinarySensorResponse) GetIsStatusBinarySensor() bool {
	if x != nil {
		return x.IsStatusBinarySensor
	}
	return false
}

func (x *ListEntitiesBinarySensorResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type BinarySensorStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// If the binary sensor does not have a valid state yet.
	// Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	MissingState bool `protobuf:"varint,3,opt,name=missing_state,json=missingState,proto3" json:"missing_state,omitempty"`
}

func (x *BinarySensorStateResponse) Reset() {
	*x = BinarySensorStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinarySensorStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinarySensorStateResponse) ProtoMessage() {}

func (x *BinarySensorStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinarySensorStateResponse.ProtoReflect.Descriptor instead.
func (*BinarySensorStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *BinarySensorStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *BinarySensorStateResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *BinarySensorStateResponse) GetMissingState() bool {
	if x != nil {
		return x.MissingState
	}
	return false
}

// ==================== COVER ====================
type ListEntitiesCoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	AssumedState      bool   `protobuf:"varint,5,opt,name=assumed_state,json=assumedState,proto3" json:"assumed_state,omitempty"`
	SupportsPosition  bool   `protobuf:"varint,6,opt,name=supports_position,json=supportsPosition,proto3" json:"supports_position,omitempty"`
	SupportsTilt      bool   `protobuf:"varint,7,opt,name=supports_tilt,json=supportsTilt,proto3" json:"supports_tilt,omitempty"`
	DeviceClass       string `protobuf:"bytes,8,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	DisabledByDefault bool   `protobuf:"varint,9,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesCoverResponse) Reset() {
	*x = ListEntitiesCoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesCoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesCoverResponse) ProtoMessage() {}

func (x *ListEntitiesCoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesCoverResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesCoverResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListEntitiesCoverResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesCoverResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesCoverResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesCoverResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesCoverResponse) GetAssumedState() bool {
	if x != nil {
		return x.AssumedState
	}
	return false
}

func (x *ListEntitiesCoverResponse) GetSupportsPosition() bool {
	if x != nil {
		return x.SupportsPosition
	}
	return false
}

func (x *ListEntitiesCoverResponse) GetSupportsTilt() bool {
	if x != nil {
		return x.SupportsTilt
	}
	return false
}

func (x *ListEntitiesCoverResponse) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *ListEntitiesCoverResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type CoverStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	// legacy: state has been removed in 1.13
	// clients/servers must still send/accept it until the next protocol change
	LegacyState      LegacyCoverState `protobuf:"varint,2,opt,name=legacy_state,json=legacyState,proto3,enum=LegacyCoverState" json:"legacy_state,omitempty"`
	Position         float32          `protobuf:"fixed32,3,opt,name=position,proto3" json:"position,omitempty"`
	Tilt             float32          `protobuf:"fixed32,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
	CurrentOperation CoverOperation   `protobuf:"varint,5,opt,name=current_operation,json=currentOperation,proto3,enum=CoverOperation" json:"current_operation,omitempty"`
}

func (x *CoverStateResponse) Reset() {
	*x = CoverStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverStateResponse) ProtoMessage() {}

func (x *CoverStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverStateResponse.ProtoReflect.Descriptor instead.
func (*CoverStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *CoverStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *CoverStateResponse) GetLegacyState() LegacyCoverState {
	if x != nil {
		return x.LegacyState
	}
	return LegacyCoverState_LEGACY_COVER_STATE_OPEN
}

func (x *CoverStateResponse) GetPosition() float32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CoverStateResponse) GetTilt() float32 {
	if x != nil {
		return x.Tilt
	}
	return 0
}

func (x *CoverStateResponse) GetCurrentOperation() CoverOperation {
	if x != nil {
		return x.CurrentOperation
	}
	return CoverOperation_COVER_OPERATION_IDLE
}

type CoverCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	// legacy: command has been removed in 1.13
	// clients/servers must still send/accept it until the next protocol change
	HasLegacyCommand bool               `protobuf:"varint,2,opt,name=has_legacy_command,json=hasLegacyCommand,proto3" json:"has_legacy_command,omitempty"`
	LegacyCommand    LegacyCoverCommand `protobuf:"varint,3,opt,name=legacy_command,json=legacyCommand,proto3,enum=LegacyCoverCommand" json:"legacy_command,omitempty"`
	HasPosition      bool               `protobuf:"varint,4,opt,name=has_position,json=hasPosition,proto3" json:"has_position,omitempty"`
	Position         float32            `protobuf:"fixed32,5,opt,name=position,proto3" json:"position,omitempty"`
	HasTilt          bool               `protobuf:"varint,6,opt,name=has_tilt,json=hasTilt,proto3" json:"has_tilt,omitempty"`
	Tilt             float32            `protobuf:"fixed32,7,opt,name=tilt,proto3" json:"tilt,omitempty"`
	Stop             bool               `protobuf:"varint,8,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *CoverCommandRequest) Reset() {
	*x = CoverCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverCommandRequest) ProtoMessage() {}

func (x *CoverCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverCommandRequest.ProtoReflect.Descriptor instead.
func (*CoverCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *CoverCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *CoverCommandRequest) GetHasLegacyCommand() bool {
	if x != nil {
		return x.HasLegacyCommand
	}
	return false
}

func (x *CoverCommandRequest) GetLegacyCommand() LegacyCoverCommand {
	if x != nil {
		return x.LegacyCommand
	}
	return LegacyCoverCommand_LEGACY_COVER_COMMAND_OPEN
}

func (x *CoverCommandRequest) GetHasPosition() bool {
	if x != nil {
		return x.HasPosition
	}
	return false
}

func (x *CoverCommandRequest) GetPosition() float32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CoverCommandRequest) GetHasTilt() bool {
	if x != nil {
		return x.HasTilt
	}
	return false
}

func (x *CoverCommandRequest) GetTilt() float32 {
	if x != nil {
		return x.Tilt
	}
	return 0
}

func (x *CoverCommandRequest) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

// ==================== FAN ====================
type ListEntitiesFanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId             string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key                  uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                 string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId             string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	SupportsOscillation  bool   `protobuf:"varint,5,opt,name=supports_oscillation,json=supportsOscillation,proto3" json:"supports_oscillation,omitempty"`
	SupportsSpeed        bool   `protobuf:"varint,6,opt,name=supports_speed,json=supportsSpeed,proto3" json:"supports_speed,omitempty"`
	SupportsDirection    bool   `protobuf:"varint,7,opt,name=supports_direction,json=supportsDirection,proto3" json:"supports_direction,omitempty"`
	SupportedSpeedLevels int32  `protobuf:"varint,8,opt,name=supported_speed_levels,json=supportedSpeedLevels,proto3" json:"supported_speed_levels,omitempty"`
	DisabledByDefault    bool   `protobuf:"varint,9,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesFanResponse) Reset() {
	*x = ListEntitiesFanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesFanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesFanResponse) ProtoMessage() {}

func (x *ListEntitiesFanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesFanResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesFanResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListEntitiesFanResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesFanResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesFanResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesFanResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesFanResponse) GetSupportsOscillation() bool {
	if x != nil {
		return x.SupportsOscillation
	}
	return false
}

func (x *ListEntitiesFanResponse) GetSupportsSpeed() bool {
	if x != nil {
		return x.SupportsSpeed
	}
	return false
}

func (x *ListEntitiesFanResponse) GetSupportsDirection() bool {
	if x != nil {
		return x.SupportsDirection
	}
	return false
}

func (x *ListEntitiesFanResponse) GetSupportedSpeedLevels() int32 {
	if x != nil {
		return x.SupportedSpeedLevels
	}
	return 0
}

func (x *ListEntitiesFanResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type FanStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State       bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Oscillating bool   `protobuf:"varint,3,opt,name=oscillating,proto3" json:"oscillating,omitempty"`
	// Deprecated: Do not use.
	Speed      FanSpeed     `protobuf:"varint,4,opt,name=speed,proto3,enum=FanSpeed" json:"speed,omitempty"`
	Direction  FanDirection `protobuf:"varint,5,opt,name=direction,proto3,enum=FanDirection" json:"direction,omitempty"`
	SpeedLevel int32        `protobuf:"varint,6,opt,name=speed_level,json=speedLevel,proto3" json:"speed_level,omitempty"`
}

func (x *FanStateResponse) Reset() {
	*x = FanStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanStateResponse) ProtoMessage() {}

func (x *FanStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanStateResponse.ProtoReflect.Descriptor instead.
func (*FanStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *FanStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *FanStateResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *FanStateResponse) GetOscillating() bool {
	if x != nil {
		return x.Oscillating
	}
	return false
}

// Deprecated: Do not use.
func (x *FanStateResponse) GetSpeed() FanSpeed {
	if x != nil {
		return x.Speed
	}
	return FanSpeed_FAN_SPEED_LOW
}

func (x *FanStateResponse) GetDirection() FanDirection {
	if x != nil {
		return x.Direction
	}
	return FanDirection_FAN_DIRECTION_FORWARD
}

func (x *FanStateResponse) GetSpeedLevel() int32 {
	if x != nil {
		return x.SpeedLevel
	}
	return 0
}

type FanCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	HasState bool   `protobuf:"varint,2,opt,name=has_state,json=hasState,proto3" json:"has_state,omitempty"`
	State    bool   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	// Deprecated: Do not use.
	HasSpeed bool `protobuf:"varint,4,opt,name=has_speed,json=hasSpeed,proto3" json:"has_speed,omitempty"`
	// Deprecated: Do not use.
	Speed          FanSpeed     `protobuf:"varint,5,opt,name=speed,proto3,enum=FanSpeed" json:"speed,omitempty"`
	HasOscillating bool         `protobuf:"varint,6,opt,name=has_oscillating,json=hasOscillating,proto3" json:"has_oscillating,omitempty"`
	Oscillating    bool         `protobuf:"varint,7,opt,name=oscillating,proto3" json:"oscillating,omitempty"`
	HasDirection   bool         `protobuf:"varint,8,opt,name=has_direction,json=hasDirection,proto3" json:"has_direction,omitempty"`
	Direction      FanDirection `protobuf:"varint,9,opt,name=direction,proto3,enum=FanDirection" json:"direction,omitempty"`
	HasSpeedLevel  bool         `protobuf:"varint,10,opt,name=has_speed_level,json=hasSpeedLevel,proto3" json:"has_speed_level,omitempty"`
	SpeedLevel     int32        `protobuf:"varint,11,opt,name=speed_level,json=speedLevel,proto3" json:"speed_level,omitempty"`
}

func (x *FanCommandRequest) Reset() {
	*x = FanCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanCommandRequest) ProtoMessage() {}

func (x *FanCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanCommandRequest.ProtoReflect.Descriptor instead.
func (*FanCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *FanCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *FanCommandRequest) GetHasState() bool {
	if x != nil {
		return x.HasState
	}
	return false
}

func (x *FanCommandRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// Deprecated: Do not use.
func (x *FanCommandRequest) GetHasSpeed() bool {
	if x != nil {
		return x.HasSpeed
	}
	return false
}

// Deprecated: Do not use.
func (x *FanCommandRequest) GetSpeed() FanSpeed {
	if x != nil {
		return x.Speed
	}
	return FanSpeed_FAN_SPEED_LOW
}

func (x *FanCommandRequest) GetHasOscillating() bool {
	if x != nil {
		return x.HasOscillating
	}
	return false
}

func (x *FanCommandRequest) GetOscillating() bool {
	if x != nil {
		return x.Oscillating
	}
	return false
}

func (x *FanCommandRequest) GetHasDirection() bool {
	if x != nil {
		return x.HasDirection
	}
	return false
}

func (x *FanCommandRequest) GetDirection() FanDirection {
	if x != nil {
		return x.Direction
	}
	return FanDirection_FAN_DIRECTION_FORWARD
}

func (x *FanCommandRequest) GetHasSpeedLevel() bool {
	if x != nil {
		return x.HasSpeedLevel
	}
	return false
}

func (x *FanCommandRequest) GetSpeedLevel() int32 {
	if x != nil {
		return x.SpeedLevel
	}
	return 0
}

// ==================== LIGHT ====================
type ListEntitiesLightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId            string  `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key                 uint32  `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId            string  `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	SupportedColorModes []int32 `protobuf:"varint,12,rep,packed,name=supported_color_modes,json=supportedColorModes,proto3" json:"supported_color_modes,omitempty"`
	// next four supports_* are for legacy clients, newer clients should use color modes
	//
	// Deprecated: Do not use.
	LegacySupportsBrightness bool `protobuf:"varint,5,opt,name=legacy_supports_brightness,json=legacySupportsBrightness,proto3" json:"legacy_supports_brightness,omitempty"`
	// Deprecated: Do not use.
	LegacySupportsRgb bool `protobuf:"varint,6,opt,name=legacy_supports_rgb,json=legacySupportsRgb,proto3" json:"legacy_supports_rgb,omitempty"`
	// Deprecated: Do not use.
	LegacySupportsWhiteValue bool `protobuf:"varint,7,opt,name=legacy_supports_white_value,json=legacySupportsWhiteValue,proto3" json:"legacy_supports_white_value,omitempty"`
	// Deprecated: Do not use.
	LegacySupportsColorTemperature bool     `protobuf:"varint,8,opt,name=legacy_supports_color_temperature,json=legacySupportsColorTemperature,proto3" json:"legacy_supports_color_temperature,omitempty"`
	MinMireds                      float32  `protobuf:"fixed32,9,opt,name=min_mireds,json=minMireds,proto3" json:"min_mireds,omitempty"`
	MaxMireds                      float32  `protobuf:"fixed32,10,opt,name=max_mireds,json=maxMireds,proto3" json:"max_mireds,omitempty"`
	Effects                        []string `protobuf:"bytes,11,rep,name=effects,proto3" json:"effects,omitempty"`
	DisabledByDefault              bool     `protobuf:"varint,13,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesLightResponse) Reset() {
	*x = ListEntitiesLightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesLightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesLightResponse) ProtoMessage() {}

func (x *ListEntitiesLightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesLightResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesLightResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *ListEntitiesLightResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesLightResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesLightResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesLightResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesLightResponse) GetSupportedColorModes() []int32 {
	if x != nil {
		return x.SupportedColorModes
	}
	return nil
}

// Deprecated: Do not use.
func (x *ListEntitiesLightResponse) GetLegacySupportsBrightness() bool {
	if x != nil {
		return x.LegacySupportsBrightness
	}
	return false
}

// Deprecated: Do not use.
func (x *ListEntitiesLightResponse) GetLegacySupportsRgb() bool {
	if x != nil {
		return x.LegacySupportsRgb
	}
	return false
}

// Deprecated: Do not use.
func (x *ListEntitiesLightResponse) GetLegacySupportsWhiteValue() bool {
	if x != nil {
		return x.LegacySupportsWhiteValue
	}
	return false
}

// Deprecated: Do not use.
func (x *ListEntitiesLightResponse) GetLegacySupportsColorTemperature() bool {
	if x != nil {
		return x.LegacySupportsColorTemperature
	}
	return false
}

func (x *ListEntitiesLightResponse) GetMinMireds() float32 {
	if x != nil {
		return x.MinMireds
	}
	return 0
}

func (x *ListEntitiesLightResponse) GetMaxMireds() float32 {
	if x != nil {
		return x.MaxMireds
	}
	return 0
}

func (x *ListEntitiesLightResponse) GetEffects() []string {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *ListEntitiesLightResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type LightStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              uint32  `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State            bool    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Brightness       float32 `protobuf:"fixed32,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
	ColorMode        int32   `protobuf:"varint,11,opt,name=color_mode,json=colorMode,proto3" json:"color_mode,omitempty"`
	ColorBrightness  float32 `protobuf:"fixed32,10,opt,name=color_brightness,json=colorBrightness,proto3" json:"color_brightness,omitempty"`
	Red              float32 `protobuf:"fixed32,4,opt,name=red,proto3" json:"red,omitempty"`
	Green            float32 `protobuf:"fixed32,5,opt,name=green,proto3" json:"green,omitempty"`
	Blue             float32 `protobuf:"fixed32,6,opt,name=blue,proto3" json:"blue,omitempty"`
	White            float32 `protobuf:"fixed32,7,opt,name=white,proto3" json:"white,omitempty"`
	ColorTemperature float32 `protobuf:"fixed32,8,opt,name=color_temperature,json=colorTemperature,proto3" json:"color_temperature,omitempty"`
	ColdWhite        float32 `protobuf:"fixed32,12,opt,name=cold_white,json=coldWhite,proto3" json:"cold_white,omitempty"`
	WarmWhite        float32 `protobuf:"fixed32,13,opt,name=warm_white,json=warmWhite,proto3" json:"warm_white,omitempty"`
	Effect           string  `protobuf:"bytes,9,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *LightStateResponse) Reset() {
	*x = LightStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightStateResponse) ProtoMessage() {}

func (x *LightStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightStateResponse.ProtoReflect.Descriptor instead.
func (*LightStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *LightStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *LightStateResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *LightStateResponse) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *LightStateResponse) GetColorMode() int32 {
	if x != nil {
		return x.ColorMode
	}
	return 0
}

func (x *LightStateResponse) GetColorBrightness() float32 {
	if x != nil {
		return x.ColorBrightness
	}
	return 0
}

func (x *LightStateResponse) GetRed() float32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *LightStateResponse) GetGreen() float32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *LightStateResponse) GetBlue() float32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *LightStateResponse) GetWhite() float32 {
	if x != nil {
		return x.White
	}
	return 0
}

func (x *LightStateResponse) GetColorTemperature() float32 {
	if x != nil {
		return x.ColorTemperature
	}
	return 0
}

func (x *LightStateResponse) GetColdWhite() float32 {
	if x != nil {
		return x.ColdWhite
	}
	return 0
}

func (x *LightStateResponse) GetWarmWhite() float32 {
	if x != nil {
		return x.WarmWhite
	}
	return 0
}

func (x *LightStateResponse) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type LightCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                 uint32  `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	HasState            bool    `protobuf:"varint,2,opt,name=has_state,json=hasState,proto3" json:"has_state,omitempty"`
	State               bool    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	HasBrightness       bool    `protobuf:"varint,4,opt,name=has_brightness,json=hasBrightness,proto3" json:"has_brightness,omitempty"`
	Brightness          float32 `protobuf:"fixed32,5,opt,name=brightness,proto3" json:"brightness,omitempty"`
	HasColorMode        bool    `protobuf:"varint,22,opt,name=has_color_mode,json=hasColorMode,proto3" json:"has_color_mode,omitempty"`
	ColorMode           int32   `protobuf:"varint,23,opt,name=color_mode,json=colorMode,proto3" json:"color_mode,omitempty"`
	HasColorBrightness  bool    `protobuf:"varint,20,opt,name=has_color_brightness,json=hasColorBrightness,proto3" json:"has_color_brightness,omitempty"`
	ColorBrightness     float32 `protobuf:"fixed32,21,opt,name=color_brightness,json=colorBrightness,proto3" json:"color_brightness,omitempty"`
	HasRgb              bool    `protobuf:"varint,6,opt,name=has_rgb,json=hasRgb,proto3" json:"has_rgb,omitempty"`
	Red                 float32 `protobuf:"fixed32,7,opt,name=red,proto3" json:"red,omitempty"`
	Green               float32 `protobuf:"fixed32,8,opt,name=green,proto3" json:"green,omitempty"`
	Blue                float32 `protobuf:"fixed32,9,opt,name=blue,proto3" json:"blue,omitempty"`
	HasWhite            bool    `protobuf:"varint,10,opt,name=has_white,json=hasWhite,proto3" json:"has_white,omitempty"`
	White               float32 `protobuf:"fixed32,11,opt,name=white,proto3" json:"white,omitempty"`
	HasColorTemperature bool    `protobuf:"varint,12,opt,name=has_color_temperature,json=hasColorTemperature,proto3" json:"has_color_temperature,omitempty"`
	ColorTemperature    float32 `protobuf:"fixed32,13,opt,name=color_temperature,json=colorTemperature,proto3" json:"color_temperature,omitempty"`
	HasColdWhite        bool    `protobuf:"varint,24,opt,name=has_cold_white,json=hasColdWhite,proto3" json:"has_cold_white,omitempty"`
	ColdWhite           float32 `protobuf:"fixed32,25,opt,name=cold_white,json=coldWhite,proto3" json:"cold_white,omitempty"`
	HasWarmWhite        bool    `protobuf:"varint,26,opt,name=has_warm_white,json=hasWarmWhite,proto3" json:"has_warm_white,omitempty"`
	WarmWhite           float32 `protobuf:"fixed32,27,opt,name=warm_white,json=warmWhite,proto3" json:"warm_white,omitempty"`
	HasTransitionLength bool    `protobuf:"varint,14,opt,name=has_transition_length,json=hasTransitionLength,proto3" json:"has_transition_length,omitempty"`
	TransitionLength    uint32  `protobuf:"varint,15,opt,name=transition_length,json=transitionLength,proto3" json:"transition_length,omitempty"`
	HasFlashLength      bool    `protobuf:"varint,16,opt,name=has_flash_length,json=hasFlashLength,proto3" json:"has_flash_length,omitempty"`
	FlashLength         uint32  `protobuf:"varint,17,opt,name=flash_length,json=flashLength,proto3" json:"flash_length,omitempty"`
	HasEffect           bool    `protobuf:"varint,18,opt,name=has_effect,json=hasEffect,proto3" json:"has_effect,omitempty"`
	Effect              string  `protobuf:"bytes,19,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *LightCommandRequest) Reset() {
	*x = LightCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightCommandRequest) ProtoMessage() {}

func (x *LightCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightCommandRequest.ProtoReflect.Descriptor instead.
func (*LightCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *LightCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *LightCommandRequest) GetHasState() bool {
	if x != nil {
		return x.HasState
	}
	return false
}

func (x *LightCommandRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *LightCommandRequest) GetHasBrightness() bool {
	if x != nil {
		return x.HasBrightness
	}
	return false
}

func (x *LightCommandRequest) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *LightCommandRequest) GetHasColorMode() bool {
	if x != nil {
		return x.HasColorMode
	}
	return false
}

func (x *LightCommandRequest) GetColorMode() int32 {
	if x != nil {
		return x.ColorMode
	}
	return 0
}

func (x *LightCommandRequest) GetHasColorBrightness() bool {
	if x != nil {
		return x.HasColorBrightness
	}
	return false
}

func (x *LightCommandRequest) GetColorBrightness() float32 {
	if x != nil {
		return x.ColorBrightness
	}
	return 0
}

func (x *LightCommandRequest) GetHasRgb() bool {
	if x != nil {
		return x.HasRgb
	}
	return false
}

func (x *LightCommandRequest) GetRed() float32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *LightCommandRequest) GetGreen() float32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *LightCommandRequest) GetBlue() float32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *LightCommandRequest) GetHasWhite() bool {
	if x != nil {
		return x.HasWhite
	}
	return false
}

func (x *LightCommandRequest) GetWhite() float32 {
	if x != nil {
		return x.White
	}
	return 0
}

func (x *LightCommandRequest) GetHasColorTemperature() bool {
	if x != nil {
		return x.HasColorTemperature
	}
	return false
}

func (x *LightCommandRequest) GetColorTemperature() float32 {
	if x != nil {
		return x.ColorTemperature
	}
	return 0
}

func (x *LightCommandRequest) GetHasColdWhite() bool {
	if x != nil {
		return x.HasColdWhite
	}
	return false
}

func (x *LightCommandRequest) GetColdWhite() float32 {
	if x != nil {
		return x.ColdWhite
	}
	return 0
}

func (x *LightCommandRequest) GetHasWarmWhite() bool {
	if x != nil {
		return x.HasWarmWhite
	}
	return false
}

func (x *LightCommandRequest) GetWarmWhite() float32 {
	if x != nil {
		return x.WarmWhite
	}
	return 0
}

func (x *LightCommandRequest) GetHasTransitionLength() bool {
	if x != nil {
		return x.HasTransitionLength
	}
	return false
}

func (x *LightCommandRequest) GetTransitionLength() uint32 {
	if x != nil {
		return x.TransitionLength
	}
	return 0
}

func (x *LightCommandRequest) GetHasFlashLength() bool {
	if x != nil {
		return x.HasFlashLength
	}
	return false
}

func (x *LightCommandRequest) GetFlashLength() uint32 {
	if x != nil {
		return x.FlashLength
	}
	return 0
}

func (x *LightCommandRequest) GetHasEffect() bool {
	if x != nil {
		return x.HasEffect
	}
	return false
}

func (x *LightCommandRequest) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type ListEntitiesSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string              `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32              `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string              `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Icon              string              `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	UnitOfMeasurement string              `protobuf:"bytes,6,opt,name=unit_of_measurement,json=unitOfMeasurement,proto3" json:"unit_of_measurement,omitempty"`
	AccuracyDecimals  int32               `protobuf:"varint,7,opt,name=accuracy_decimals,json=accuracyDecimals,proto3" json:"accuracy_decimals,omitempty"`
	ForceUpdate       bool                `protobuf:"varint,8,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`
	DeviceClass       string              `protobuf:"bytes,9,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	StateClass        SensorStateClass    `protobuf:"varint,10,opt,name=state_class,json=stateClass,proto3,enum=SensorStateClass" json:"state_class,omitempty"`
	LastResetType     SensorLastResetType `protobuf:"varint,11,opt,name=last_reset_type,json=lastResetType,proto3,enum=SensorLastResetType" json:"last_reset_type,omitempty"`
	DisabledByDefault bool                `protobuf:"varint,12,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesSensorResponse) Reset() {
	*x = ListEntitiesSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesSensorResponse) ProtoMessage() {}

func (x *ListEntitiesSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesSensorResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesSensorResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *ListEntitiesSensorResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesSensorResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetUnitOfMeasurement() string {
	if x != nil {
		return x.UnitOfMeasurement
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetAccuracyDecimals() int32 {
	if x != nil {
		return x.AccuracyDecimals
	}
	return 0
}

func (x *ListEntitiesSensorResponse) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

func (x *ListEntitiesSensorResponse) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *ListEntitiesSensorResponse) GetStateClass() SensorStateClass {
	if x != nil {
		return x.StateClass
	}
	return SensorStateClass_STATE_CLASS_NONE
}

func (x *ListEntitiesSensorResponse) GetLastResetType() SensorLastResetType {
	if x != nil {
		return x.LastResetType
	}
	return SensorLastResetType_LAST_RESET_NONE
}

func (x *ListEntitiesSensorResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type SensorStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32  `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State float32 `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
	// If the sensor does not have a valid state yet.
	// Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	MissingState bool `protobuf:"varint,3,opt,name=missing_state,json=missingState,proto3" json:"missing_state,omitempty"`
}

func (x *SensorStateResponse) Reset() {
	*x = SensorStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorStateResponse) ProtoMessage() {}

func (x *SensorStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorStateResponse.ProtoReflect.Descriptor instead.
func (*SensorStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *SensorStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *SensorStateResponse) GetState() float32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SensorStateResponse) GetMissingState() bool {
	if x != nil {
		return x.MissingState
	}
	return false
}

// ==================== SWITCH ====================
type ListEntitiesSwitchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Icon              string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	AssumedState      bool   `protobuf:"varint,6,opt,name=assumed_state,json=assumedState,proto3" json:"assumed_state,omitempty"`
	DisabledByDefault bool   `protobuf:"varint,7,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesSwitchResponse) Reset() {
	*x = ListEntitiesSwitchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesSwitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesSwitchResponse) ProtoMessage() {}

func (x *ListEntitiesSwitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesSwitchResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesSwitchResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *ListEntitiesSwitchResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesSwitchResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesSwitchResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesSwitchResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesSwitchResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListEntitiesSwitchResponse) GetAssumedState() bool {
	if x != nil {
		return x.AssumedState
	}
	return false
}

func (x *ListEntitiesSwitchResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type SwitchStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SwitchStateResponse) Reset() {
	*x = SwitchStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStateResponse) ProtoMessage() {}

func (x *SwitchStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStateResponse.ProtoReflect.Descriptor instead.
func (*SwitchStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *SwitchStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *SwitchStateResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type SwitchCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SwitchCommandRequest) Reset() {
	*x = SwitchCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchCommandRequest) ProtoMessage() {}

func (x *SwitchCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchCommandRequest.ProtoReflect.Descriptor instead.
func (*SwitchCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *SwitchCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *SwitchCommandRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// ==================== TEXT SENSOR ====================
type ListEntitiesTextSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Icon              string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	DisabledByDefault bool   `protobuf:"varint,6,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesTextSensorResponse) Reset() {
	*x = ListEntitiesTextSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesTextSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesTextSensorResponse) ProtoMessage() {}

func (x *ListEntitiesTextSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesTextSensorResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesTextSensorResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *ListEntitiesTextSensorResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesTextSensorResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesTextSensorResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesTextSensorResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesTextSensorResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListEntitiesTextSensorResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type TextSensorStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// If the text sensor does not have a valid state yet.
	// Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	MissingState bool `protobuf:"varint,3,opt,name=missing_state,json=missingState,proto3" json:"missing_state,omitempty"`
}

func (x *TextSensorStateResponse) Reset() {
	*x = TextSensorStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextSensorStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextSensorStateResponse) ProtoMessage() {}

func (x *TextSensorStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextSensorStateResponse.ProtoReflect.Descriptor instead.
func (*TextSensorStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *TextSensorStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *TextSensorStateResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TextSensorStateResponse) GetMissingState() bool {
	if x != nil {
		return x.MissingState
	}
	return false
}

type SubscribeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=LogLevel" json:"level,omitempty"`
	DumpConfig bool     `protobuf:"varint,2,opt,name=dump_config,json=dumpConfig,proto3" json:"dump_config,omitempty"`
}

func (x *SubscribeLogsRequest) Reset() {
	*x = SubscribeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLogsRequest) ProtoMessage() {}

func (x *SubscribeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLogsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLogsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *SubscribeLogsRequest) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_NONE
}

func (x *SubscribeLogsRequest) GetDumpConfig() bool {
	if x != nil {
		return x.DumpConfig
	}
	return false
}

type SubscribeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=LogLevel" json:"level,omitempty"`
	Message    []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SendFailed bool     `protobuf:"varint,4,opt,name=send_failed,json=sendFailed,proto3" json:"send_failed,omitempty"`
}

func (x *SubscribeLogsResponse) Reset() {
	*x = SubscribeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLogsResponse) ProtoMessage() {}

func (x *SubscribeLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLogsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeLogsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *SubscribeLogsResponse) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_NONE
}

func (x *SubscribeLogsResponse) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SubscribeLogsResponse) GetSendFailed() bool {
	if x != nil {
		return x.SendFailed
	}
	return false
}

// ==================== HOMEASSISTANT.SERVICE ====================
type SubscribeHomeassistantServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeHomeassistantServicesRequest) Reset() {
	*x = SubscribeHomeassistantServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeHomeassistantServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeassistantServicesRequest) ProtoMessage() {}

func (x *SubscribeHomeassistantServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeassistantServicesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHomeassistantServicesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

type HomeassistantServiceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HomeassistantServiceMap) Reset() {
	*x = HomeassistantServiceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeassistantServiceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeassistantServiceMap) ProtoMessage() {}

func (x *HomeassistantServiceMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeassistantServiceMap.ProtoReflect.Descriptor instead.
func (*HomeassistantServiceMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *HomeassistantServiceMap) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HomeassistantServiceMap) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HomeassistantServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      string                     `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Data         []*HomeassistantServiceMap `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	DataTemplate []*HomeassistantServiceMap `protobuf:"bytes,3,rep,name=data_template,json=dataTemplate,proto3" json:"data_template,omitempty"`
	Variables    []*HomeassistantServiceMap `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
	IsEvent      bool                       `protobuf:"varint,5,opt,name=is_event,json=isEvent,proto3" json:"is_event,omitempty"`
}

func (x *HomeassistantServiceResponse) Reset() {
	*x = HomeassistantServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeassistantServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeassistantServiceResponse) ProtoMessage() {}

func (x *HomeassistantServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeassistantServiceResponse.ProtoReflect.Descriptor instead.
func (*HomeassistantServiceResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *HomeassistantServiceResponse) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *HomeassistantServiceResponse) GetData() []*HomeassistantServiceMap {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HomeassistantServiceResponse) GetDataTemplate() []*HomeassistantServiceMap {
	if x != nil {
		return x.DataTemplate
	}
	return nil
}

func (x *HomeassistantServiceResponse) GetVariables() []*HomeassistantServiceMap {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *HomeassistantServiceResponse) GetIsEvent() bool {
	if x != nil {
		return x.IsEvent
	}
	return false
}

// ==================== IMPORT HOME ASSISTANT STATES ====================
// 1. Client sends SubscribeHomeAssistantStatesRequest
// 2. Server responds with zero or more SubscribeHomeAssistantStateResponse (async)
// 3. Client sends HomeAssistantStateResponse for state changes.
type SubscribeHomeAssistantStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeHomeAssistantStatesRequest) Reset() {
	*x = SubscribeHomeAssistantStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeHomeAssistantStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeAssistantStatesRequest) ProtoMessage() {}

func (x *SubscribeHomeAssistantStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeAssistantStatesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHomeAssistantStatesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

type SubscribeHomeAssistantStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId  string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Attribute string `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *SubscribeHomeAssistantStateResponse) Reset() {
	*x = SubscribeHomeAssistantStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeHomeAssistantStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeAssistantStateResponse) ProtoMessage() {}

func (x *SubscribeHomeAssistantStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeAssistantStateResponse.ProtoReflect.Descriptor instead.
func (*SubscribeHomeAssistantStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *SubscribeHomeAssistantStateResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *SubscribeHomeAssistantStateResponse) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

type HomeAssistantStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId  string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	State     string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Attribute string `protobuf:"bytes,3,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *HomeAssistantStateResponse) Reset() {
	*x = HomeAssistantStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeAssistantStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeAssistantStateResponse) ProtoMessage() {}

func (x *HomeAssistantStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeAssistantStateResponse.ProtoReflect.Descriptor instead.
func (*HomeAssistantStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *HomeAssistantStateResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *HomeAssistantStateResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *HomeAssistantStateResponse) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

// ==================== IMPORT TIME ====================
type GetTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTimeRequest) Reset() {
	*x = GetTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeRequest) ProtoMessage() {}

func (x *GetTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeRequest.ProtoReflect.Descriptor instead.
func (*GetTimeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

type GetTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochSeconds uint32 `protobuf:"fixed32,1,opt,name=epoch_seconds,json=epochSeconds,proto3" json:"epoch_seconds,omitempty"`
}

func (x *GetTimeResponse) Reset() {
	*x = GetTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeResponse) ProtoMessage() {}

func (x *GetTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeResponse.ProtoReflect.Descriptor instead.
func (*GetTimeResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *GetTimeResponse) GetEpochSeconds() uint32 {
	if x != nil {
		return x.EpochSeconds
	}
	return 0
}

type ListEntitiesServicesArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ServiceArgType `protobuf:"varint,2,opt,name=type,proto3,enum=ServiceArgType" json:"type,omitempty"`
}

func (x *ListEntitiesServicesArgument) Reset() {
	*x = ListEntitiesServicesArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesServicesArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesServicesArgument) ProtoMessage() {}

func (x *ListEntitiesServicesArgument) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesServicesArgument.ProtoReflect.Descriptor instead.
func (*ListEntitiesServicesArgument) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *ListEntitiesServicesArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesServicesArgument) GetType() ServiceArgType {
	if x != nil {
		return x.Type
	}
	return ServiceArgType_SERVICE_ARG_TYPE_BOOL
}

type ListEntitiesServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  uint32                          `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Args []*ListEntitiesServicesArgument `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ListEntitiesServicesResponse) Reset() {
	*x = ListEntitiesServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesServicesResponse) ProtoMessage() {}

func (x *ListEntitiesServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesServicesResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesServicesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *ListEntitiesServicesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesServicesResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesServicesResponse) GetArgs() []*ListEntitiesServicesArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

type ExecuteServiceArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool_     bool    `protobuf:"varint,1,opt,name=bool_,json=bool,proto3" json:"bool_,omitempty"`
	LegacyInt int32   `protobuf:"varint,2,opt,name=legacy_int,json=legacyInt,proto3" json:"legacy_int,omitempty"`
	Float_    float32 `protobuf:"fixed32,3,opt,name=float_,json=float,proto3" json:"float_,omitempty"`
	String_   string  `protobuf:"bytes,4,opt,name=string_,json=string,proto3" json:"string_,omitempty"`
	// ESPHome 1.14 (api v1.3) make int a signed value
	Int_        int32     `protobuf:"zigzag32,5,opt,name=int_,json=int,proto3" json:"int_,omitempty"`
	BoolArray   []bool    `protobuf:"varint,6,rep,name=bool_array,json=boolArray,proto3" json:"bool_array,omitempty"`
	IntArray    []int32   `protobuf:"zigzag32,7,rep,name=int_array,json=intArray,proto3" json:"int_array,omitempty"`
	FloatArray  []float32 `protobuf:"fixed32,8,rep,name=float_array,json=floatArray,proto3" json:"float_array,omitempty"`
	StringArray []string  `protobuf:"bytes,9,rep,name=string_array,json=stringArray,proto3" json:"string_array,omitempty"`
}

func (x *ExecuteServiceArgument) Reset() {
	*x = ExecuteServiceArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteServiceArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteServiceArgument) ProtoMessage() {}

func (x *ExecuteServiceArgument) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteServiceArgument.ProtoReflect.Descriptor instead.
func (*ExecuteServiceArgument) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *ExecuteServiceArgument) GetBool_() bool {
	if x != nil {
		return x.Bool_
	}
	return false
}

func (x *ExecuteServiceArgument) GetLegacyInt() int32 {
	if x != nil {
		return x.LegacyInt
	}
	return 0
}

func (x *ExecuteServiceArgument) GetFloat_() float32 {
	if x != nil {
		return x.Float_
	}
	return 0
}

func (x *ExecuteServiceArgument) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ExecuteServiceArgument) GetInt_() int32 {
	if x != nil {
		return x.Int_
	}
	return 0
}

func (x *ExecuteServiceArgument) GetBoolArray() []bool {
	if x != nil {
		return x.BoolArray
	}
	return nil
}

func (x *ExecuteServiceArgument) GetIntArray() []int32 {
	if x != nil {
		return x.IntArray
	}
	return nil
}

func (x *ExecuteServiceArgument) GetFloatArray() []float32 {
	if x != nil {
		return x.FloatArray
	}
	return nil
}

func (x *ExecuteServiceArgument) GetStringArray() []string {
	if x != nil {
		return x.StringArray
	}
	return nil
}

type ExecuteServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  uint32                    `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	Args []*ExecuteServiceArgument `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ExecuteServiceRequest) Reset() {
	*x = ExecuteServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteServiceRequest) ProtoMessage() {}

func (x *ExecuteServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteServiceRequest.ProtoReflect.Descriptor instead.
func (*ExecuteServiceRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *ExecuteServiceRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ExecuteServiceRequest) GetArgs() []*ExecuteServiceArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

// ==================== CAMERA ====================
type ListEntitiesCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32 `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	DisabledByDefault bool   `protobuf:"varint,5,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesCameraResponse) Reset() {
	*x = ListEntitiesCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesCameraResponse) ProtoMessage() {}

func (x *ListEntitiesCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesCameraResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesCameraResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

func (x *ListEntitiesCameraResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesCameraResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesCameraResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesCameraResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesCameraResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type CameraImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Done bool   `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *CameraImageResponse) Reset() {
	*x = CameraImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraImageResponse) ProtoMessage() {}

func (x *CameraImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraImageResponse.ProtoReflect.Descriptor instead.
func (*CameraImageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *CameraImageResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *CameraImageResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CameraImageResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type CameraImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single bool `protobuf:"varint,1,opt,name=single,proto3" json:"single,omitempty"`
	Stream bool `protobuf:"varint,2,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *CameraImageRequest) Reset() {
	*x = CameraImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraImageRequest) ProtoMessage() {}

func (x *CameraImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraImageRequest.ProtoReflect.Descriptor instead.
func (*CameraImageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *CameraImageRequest) GetSingle() bool {
	if x != nil {
		return x.Single
	}
	return false
}

func (x *CameraImageRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type ListEntitiesClimateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId                          string        `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key                               uint32        `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                              string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId                          string        `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	SupportsCurrentTemperature        bool          `protobuf:"varint,5,opt,name=supports_current_temperature,json=supportsCurrentTemperature,proto3" json:"supports_current_temperature,omitempty"`
	SupportsTwoPointTargetTemperature bool          `protobuf:"varint,6,opt,name=supports_two_point_target_temperature,json=supportsTwoPointTargetTemperature,proto3" json:"supports_two_point_target_temperature,omitempty"`
	SupportedModes                    []ClimateMode `protobuf:"varint,7,rep,packed,name=supported_modes,json=supportedModes,proto3,enum=ClimateMode" json:"supported_modes,omitempty"`
	VisualMinTemperature              float32       `protobuf:"fixed32,8,opt,name=visual_min_temperature,json=visualMinTemperature,proto3" json:"visual_min_temperature,omitempty"`
	VisualMaxTemperature              float32       `protobuf:"fixed32,9,opt,name=visual_max_temperature,json=visualMaxTemperature,proto3" json:"visual_max_temperature,omitempty"`
	VisualTemperatureStep             float32       `protobuf:"fixed32,10,opt,name=visual_temperature_step,json=visualTemperatureStep,proto3" json:"visual_temperature_step,omitempty"`
	// for older peer versions - in new system this
	// is if CLIMATE_PRESET_AWAY exists is supported_presets
	LegacySupportsAway      bool               `protobuf:"varint,11,opt,name=legacy_supports_away,json=legacySupportsAway,proto3" json:"legacy_supports_away,omitempty"`
	SupportsAction          bool               `protobuf:"varint,12,opt,name=supports_action,json=supportsAction,proto3" json:"supports_action,omitempty"`
	SupportedFanModes       []ClimateFanMode   `protobuf:"varint,13,rep,packed,name=supported_fan_modes,json=supportedFanModes,proto3,enum=ClimateFanMode" json:"supported_fan_modes,omitempty"`
	SupportedSwingModes     []ClimateSwingMode `protobuf:"varint,14,rep,packed,name=supported_swing_modes,json=supportedSwingModes,proto3,enum=ClimateSwingMode" json:"supported_swing_modes,omitempty"`
	SupportedCustomFanModes []string           `protobuf:"bytes,15,rep,name=supported_custom_fan_modes,json=supportedCustomFanModes,proto3" json:"supported_custom_fan_modes,omitempty"`
	SupportedPresets        []ClimatePreset    `protobuf:"varint,16,rep,packed,name=supported_presets,json=supportedPresets,proto3,enum=ClimatePreset" json:"supported_presets,omitempty"`
	SupportedCustomPresets  []string           `protobuf:"bytes,17,rep,name=supported_custom_presets,json=supportedCustomPresets,proto3" json:"supported_custom_presets,omitempty"`
	DisabledByDefault       bool               `protobuf:"varint,18,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesClimateResponse) Reset() {
	*x = ListEntitiesClimateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesClimateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesClimateResponse) ProtoMessage() {}

func (x *ListEntitiesClimateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesClimateResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesClimateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

func (x *ListEntitiesClimateResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesClimateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesClimateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesClimateResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesClimateResponse) GetSupportsCurrentTemperature() bool {
	if x != nil {
		return x.SupportsCurrentTemperature
	}
	return false
}

func (x *ListEntitiesClimateResponse) GetSupportsTwoPointTargetTemperature() bool {
	if x != nil {
		return x.SupportsTwoPointTargetTemperature
	}
	return false
}

func (x *ListEntitiesClimateResponse) GetSupportedModes() []ClimateMode {
	if x != nil {
		return x.SupportedModes
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetVisualMinTemperature() float32 {
	if x != nil {
		return x.VisualMinTemperature
	}
	return 0
}

func (x *ListEntitiesClimateResponse) GetVisualMaxTemperature() float32 {
	if x != nil {
		return x.VisualMaxTemperature
	}
	return 0
}

func (x *ListEntitiesClimateResponse) GetVisualTemperatureStep() float32 {
	if x != nil {
		return x.VisualTemperatureStep
	}
	return 0
}

func (x *ListEntitiesClimateResponse) GetLegacySupportsAway() bool {
	if x != nil {
		return x.LegacySupportsAway
	}
	return false
}

func (x *ListEntitiesClimateResponse) GetSupportsAction() bool {
	if x != nil {
		return x.SupportsAction
	}
	return false
}

func (x *ListEntitiesClimateResponse) GetSupportedFanModes() []ClimateFanMode {
	if x != nil {
		return x.SupportedFanModes
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetSupportedSwingModes() []ClimateSwingMode {
	if x != nil {
		return x.SupportedSwingModes
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetSupportedCustomFanModes() []string {
	if x != nil {
		return x.SupportedCustomFanModes
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetSupportedPresets() []ClimatePreset {
	if x != nil {
		return x.SupportedPresets
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetSupportedCustomPresets() []string {
	if x != nil {
		return x.SupportedCustomPresets
	}
	return nil
}

func (x *ListEntitiesClimateResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type ClimateStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                   uint32      `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	Mode                  ClimateMode `protobuf:"varint,2,opt,name=mode,proto3,enum=ClimateMode" json:"mode,omitempty"`
	CurrentTemperature    float32     `protobuf:"fixed32,3,opt,name=current_temperature,json=currentTemperature,proto3" json:"current_temperature,omitempty"`
	TargetTemperature     float32     `protobuf:"fixed32,4,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
	TargetTemperatureLow  float32     `protobuf:"fixed32,5,opt,name=target_temperature_low,json=targetTemperatureLow,proto3" json:"target_temperature_low,omitempty"`
	TargetTemperatureHigh float32     `protobuf:"fixed32,6,opt,name=target_temperature_high,json=targetTemperatureHigh,proto3" json:"target_temperature_high,omitempty"`
	// For older peers, equal to preset == CLIMATE_PRESET_AWAY
	LegacyAway    bool             `protobuf:"varint,7,opt,name=legacy_away,json=legacyAway,proto3" json:"legacy_away,omitempty"`
	Action        ClimateAction    `protobuf:"varint,8,opt,name=action,proto3,enum=ClimateAction" json:"action,omitempty"`
	FanMode       ClimateFanMode   `protobuf:"varint,9,opt,name=fan_mode,json=fanMode,proto3,enum=ClimateFanMode" json:"fan_mode,omitempty"`
	SwingMode     ClimateSwingMode `protobuf:"varint,10,opt,name=swing_mode,json=swingMode,proto3,enum=ClimateSwingMode" json:"swing_mode,omitempty"`
	CustomFanMode string           `protobuf:"bytes,11,opt,name=custom_fan_mode,json=customFanMode,proto3" json:"custom_fan_mode,omitempty"`
	Preset        ClimatePreset    `protobuf:"varint,12,opt,name=preset,proto3,enum=ClimatePreset" json:"preset,omitempty"`
	CustomPreset  string           `protobuf:"bytes,13,opt,name=custom_preset,json=customPreset,proto3" json:"custom_preset,omitempty"`
}

func (x *ClimateStateResponse) Reset() {
	*x = ClimateStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimateStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimateStateResponse) ProtoMessage() {}

func (x *ClimateStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimateStateResponse.ProtoReflect.Descriptor instead.
func (*ClimateStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *ClimateStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ClimateStateResponse) GetMode() ClimateMode {
	if x != nil {
		return x.Mode
	}
	return ClimateMode_CLIMATE_MODE_OFF
}

func (x *ClimateStateResponse) GetCurrentTemperature() float32 {
	if x != nil {
		return x.CurrentTemperature
	}
	return 0
}

func (x *ClimateStateResponse) GetTargetTemperature() float32 {
	if x != nil {
		return x.TargetTemperature
	}
	return 0
}

func (x *ClimateStateResponse) GetTargetTemperatureLow() float32 {
	if x != nil {
		return x.TargetTemperatureLow
	}
	return 0
}

func (x *ClimateStateResponse) GetTargetTemperatureHigh() float32 {
	if x != nil {
		return x.TargetTemperatureHigh
	}
	return 0
}

func (x *ClimateStateResponse) GetLegacyAway() bool {
	if x != nil {
		return x.LegacyAway
	}
	return false
}

func (x *ClimateStateResponse) GetAction() ClimateAction {
	if x != nil {
		return x.Action
	}
	return ClimateAction_CLIMATE_ACTION_OFF
}

func (x *ClimateStateResponse) GetFanMode() ClimateFanMode {
	if x != nil {
		return x.FanMode
	}
	return ClimateFanMode_CLIMATE_FAN_ON
}

func (x *ClimateStateResponse) GetSwingMode() ClimateSwingMode {
	if x != nil {
		return x.SwingMode
	}
	return ClimateSwingMode_CLIMATE_SWING_OFF
}

func (x *ClimateStateResponse) GetCustomFanMode() string {
	if x != nil {
		return x.CustomFanMode
	}
	return ""
}

func (x *ClimateStateResponse) GetPreset() ClimatePreset {
	if x != nil {
		return x.Preset
	}
	return ClimatePreset_CLIMATE_PRESET_NONE
}

func (x *ClimateStateResponse) GetCustomPreset() string {
	if x != nil {
		return x.CustomPreset
	}
	return ""
}

type ClimateCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                      uint32      `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	HasMode                  bool        `protobuf:"varint,2,opt,name=has_mode,json=hasMode,proto3" json:"has_mode,omitempty"`
	Mode                     ClimateMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ClimateMode" json:"mode,omitempty"`
	HasTargetTemperature     bool        `protobuf:"varint,4,opt,name=has_target_temperature,json=hasTargetTemperature,proto3" json:"has_target_temperature,omitempty"`
	TargetTemperature        float32     `protobuf:"fixed32,5,opt,name=target_temperature,json=targetTemperature,proto3" json:"target_temperature,omitempty"`
	HasTargetTemperatureLow  bool        `protobuf:"varint,6,opt,name=has_target_temperature_low,json=hasTargetTemperatureLow,proto3" json:"has_target_temperature_low,omitempty"`
	TargetTemperatureLow     float32     `protobuf:"fixed32,7,opt,name=target_temperature_low,json=targetTemperatureLow,proto3" json:"target_temperature_low,omitempty"`
	HasTargetTemperatureHigh bool        `protobuf:"varint,8,opt,name=has_target_temperature_high,json=hasTargetTemperatureHigh,proto3" json:"has_target_temperature_high,omitempty"`
	TargetTemperatureHigh    float32     `protobuf:"fixed32,9,opt,name=target_temperature_high,json=targetTemperatureHigh,proto3" json:"target_temperature_high,omitempty"`
	// legacy, for older peers, newer ones should use CLIMATE_PRESET_AWAY in preset
	HasLegacyAway    bool             `protobuf:"varint,10,opt,name=has_legacy_away,json=hasLegacyAway,proto3" json:"has_legacy_away,omitempty"`
	LegacyAway       bool             `protobuf:"varint,11,opt,name=legacy_away,json=legacyAway,proto3" json:"legacy_away,omitempty"`
	HasFanMode       bool             `protobuf:"varint,12,opt,name=has_fan_mode,json=hasFanMode,proto3" json:"has_fan_mode,omitempty"`
	FanMode          ClimateFanMode   `protobuf:"varint,13,opt,name=fan_mode,json=fanMode,proto3,enum=ClimateFanMode" json:"fan_mode,omitempty"`
	HasSwingMode     bool             `protobuf:"varint,14,opt,name=has_swing_mode,json=hasSwingMode,proto3" json:"has_swing_mode,omitempty"`
	SwingMode        ClimateSwingMode `protobuf:"varint,15,opt,name=swing_mode,json=swingMode,proto3,enum=ClimateSwingMode" json:"swing_mode,omitempty"`
	HasCustomFanMode bool             `protobuf:"varint,16,opt,name=has_custom_fan_mode,json=hasCustomFanMode,proto3" json:"has_custom_fan_mode,omitempty"`
	CustomFanMode    string           `protobuf:"bytes,17,opt,name=custom_fan_mode,json=customFanMode,proto3" json:"custom_fan_mode,omitempty"`
	HasPreset        bool             `protobuf:"varint,18,opt,name=has_preset,json=hasPreset,proto3" json:"has_preset,omitempty"`
	Preset           ClimatePreset    `protobuf:"varint,19,opt,name=preset,proto3,enum=ClimatePreset" json:"preset,omitempty"`
	HasCustomPreset  bool             `protobuf:"varint,20,opt,name=has_custom_preset,json=hasCustomPreset,proto3" json:"has_custom_preset,omitempty"`
	CustomPreset     string           `protobuf:"bytes,21,opt,name=custom_preset,json=customPreset,proto3" json:"custom_preset,omitempty"`
}

func (x *ClimateCommandRequest) Reset() {
	*x = ClimateCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClimateCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClimateCommandRequest) ProtoMessage() {}

func (x *ClimateCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClimateCommandRequest.ProtoReflect.Descriptor instead.
func (*ClimateCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

func (x *ClimateCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ClimateCommandRequest) GetHasMode() bool {
	if x != nil {
		return x.HasMode
	}
	return false
}

func (x *ClimateCommandRequest) GetMode() ClimateMode {
	if x != nil {
		return x.Mode
	}
	return ClimateMode_CLIMATE_MODE_OFF
}

func (x *ClimateCommandRequest) GetHasTargetTemperature() bool {
	if x != nil {
		return x.HasTargetTemperature
	}
	return false
}

func (x *ClimateCommandRequest) GetTargetTemperature() float32 {
	if x != nil {
		return x.TargetTemperature
	}
	return 0
}

func (x *ClimateCommandRequest) GetHasTargetTemperatureLow() bool {
	if x != nil {
		return x.HasTargetTemperatureLow
	}
	return false
}

func (x *ClimateCommandRequest) GetTargetTemperatureLow() float32 {
	if x != nil {
		return x.TargetTemperatureLow
	}
	return 0
}

func (x *ClimateCommandRequest) GetHasTargetTemperatureHigh() bool {
	if x != nil {
		return x.HasTargetTemperatureHigh
	}
	return false
}

func (x *ClimateCommandRequest) GetTargetTemperatureHigh() float32 {
	if x != nil {
		return x.TargetTemperatureHigh
	}
	return 0
}

func (x *ClimateCommandRequest) GetHasLegacyAway() bool {
	if x != nil {
		return x.HasLegacyAway
	}
	return false
}

func (x *ClimateCommandRequest) GetLegacyAway() bool {
	if x != nil {
		return x.LegacyAway
	}
	return false
}

func (x *ClimateCommandRequest) GetHasFanMode() bool {
	if x != nil {
		return x.HasFanMode
	}
	return false
}

func (x *ClimateCommandRequest) GetFanMode() ClimateFanMode {
	if x != nil {
		return x.FanMode
	}
	return ClimateFanMode_CLIMATE_FAN_ON
}

func (x *ClimateCommandRequest) GetHasSwingMode() bool {
	if x != nil {
		return x.HasSwingMode
	}
	return false
}

func (x *ClimateCommandRequest) GetSwingMode() ClimateSwingMode {
	if x != nil {
		return x.SwingMode
	}
	return ClimateSwingMode_CLIMATE_SWING_OFF
}

func (x *ClimateCommandRequest) GetHasCustomFanMode() bool {
	if x != nil {
		return x.HasCustomFanMode
	}
	return false
}

func (x *ClimateCommandRequest) GetCustomFanMode() string {
	if x != nil {
		return x.CustomFanMode
	}
	return ""
}

func (x *ClimateCommandRequest) GetHasPreset() bool {
	if x != nil {
		return x.HasPreset
	}
	return false
}

func (x *ClimateCommandRequest) GetPreset() ClimatePreset {
	if x != nil {
		return x.Preset
	}
	return ClimatePreset_CLIMATE_PRESET_NONE
}

func (x *ClimateCommandRequest) GetHasCustomPreset() bool {
	if x != nil {
		return x.HasCustomPreset
	}
	return false
}

func (x *ClimateCommandRequest) GetCustomPreset() string {
	if x != nil {
		return x.CustomPreset
	}
	return ""
}

// ==================== NUMBER ====================
type ListEntitiesNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string  `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32  `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string  `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Icon              string  `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	MinValue          float32 `protobuf:"fixed32,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue          float32 `protobuf:"fixed32,7,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	Step              float32 `protobuf:"fixed32,8,opt,name=step,proto3" json:"step,omitempty"`
	DisabledByDefault bool    `protobuf:"varint,9,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesNumberResponse) Reset() {
	*x = ListEntitiesNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesNumberResponse) ProtoMessage() {}

func (x *ListEntitiesNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesNumberResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesNumberResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *ListEntitiesNumberResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesNumberResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesNumberResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesNumberResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesNumberResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListEntitiesNumberResponse) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ListEntitiesNumberResponse) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ListEntitiesNumberResponse) GetStep() float32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *ListEntitiesNumberResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type NumberStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32  `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State float32 `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
	// If the number does not have a valid state yet.
	// Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	MissingState bool `protobuf:"varint,3,opt,name=missing_state,json=missingState,proto3" json:"missing_state,omitempty"`
}

func (x *NumberStateResponse) Reset() {
	*x = NumberStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberStateResponse) ProtoMessage() {}

func (x *NumberStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberStateResponse.ProtoReflect.Descriptor instead.
func (*NumberStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

func (x *NumberStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *NumberStateResponse) GetState() float32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *NumberStateResponse) GetMissingState() bool {
	if x != nil {
		return x.MissingState
	}
	return false
}

type NumberCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32  `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State float32 `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NumberCommandRequest) Reset() {
	*x = NumberCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberCommandRequest) ProtoMessage() {}

func (x *NumberCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberCommandRequest.ProtoReflect.Descriptor instead.
func (*NumberCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *NumberCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *NumberCommandRequest) GetState() float32 {
	if x != nil {
		return x.State
	}
	return 0
}

// ==================== SELECT ====================
type ListEntitiesSelectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Key               uint32   `protobuf:"fixed32,2,opt,name=key,proto3" json:"key,omitempty"`
	Name              string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UniqueId          string   `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Icon              string   `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Options           []string `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	DisabledByDefault bool     `protobuf:"varint,7,opt,name=disabled_by_default,json=disabledByDefault,proto3" json:"disabled_by_default,omitempty"`
}

func (x *ListEntitiesSelectResponse) Reset() {
	*x = ListEntitiesSelectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitiesSelectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitiesSelectResponse) ProtoMessage() {}

func (x *ListEntitiesSelectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitiesSelectResponse.ProtoReflect.Descriptor instead.
func (*ListEntitiesSelectResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

func (x *ListEntitiesSelectResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListEntitiesSelectResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListEntitiesSelectResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEntitiesSelectResponse) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ListEntitiesSelectResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListEntitiesSelectResponse) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListEntitiesSelectResponse) GetDisabledByDefault() bool {
	if x != nil {
		return x.DisabledByDefault
	}
	return false
}

type SelectStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// If the select does not have a valid state yet.
	// Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	MissingState bool `protobuf:"varint,3,opt,name=missing_state,json=missingState,proto3" json:"missing_state,omitempty"`
}

func (x *SelectStateResponse) Reset() {
	*x = SelectStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStateResponse) ProtoMessage() {}

func (x *SelectStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStateResponse.ProtoReflect.Descriptor instead.
func (*SelectStateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *SelectStateResponse) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *SelectStateResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SelectStateResponse) GetMissingState() bool {
	if x != nil {
		return x.MissingState
	}
	return false
}

type SelectCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"fixed32,1,opt,name=key,proto3" json:"key,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SelectCommandRequest) Reset() {
	*x = SelectCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectCommandRequest) ProtoMessage() {}

func (x *SelectCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectCommandRequest.ProtoReflect.Descriptor instead.
func (*SelectCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *SelectCommandRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *SelectCommandRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x3a,
	0x09, 0xe0, 0x40, 0x01, 0xe8, 0x40, 0x02, 0x80, 0x41, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x09, 0xe0, 0x40, 0x02, 0xe8, 0x40, 0x01, 0x80, 0x41, 0x01,
	0x22, 0x37, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x09,
	0xe0, 0x40, 0x03, 0xe8, 0x40, 0x02, 0x80, 0x41, 0x01, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x09, 0xe0, 0x40, 0x04, 0xe8, 0x40, 0x01, 0x80,
	0x41, 0x01, 0x22, 0x1e, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x09, 0xe0, 0x40, 0x05, 0xe8, 0x40, 0x00, 0x80,
	0x41, 0x01, 0x22, 0x1f, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x09, 0xe0, 0x40, 0x06, 0xe8, 0x40, 0x00,
	0x80, 0x41, 0x01, 0x22, 0x15, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x3a, 0x06, 0xe0, 0x40, 0x07, 0xe8, 0x40, 0x00, 0x22, 0x16, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0xe0, 0x40, 0x08, 0xe8,
	0x40, 0x00, 0x22, 0x1b, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xe0, 0x40, 0x09, 0xe8, 0x40, 0x02, 0x22,
	0xd2, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x73, 0x70, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x73, 0x70, 0x68, 0x6f,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x44, 0x65, 0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xe0, 0x40,
	0x0a, 0xe8, 0x40, 0x01, 0x22, 0x1d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xe0, 0x40, 0x0b,
	0xe8, 0x40, 0x02, 0x22, 0x25, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x09, 0xe0, 0x40, 0x13, 0xe8, 0x40, 0x01, 0x80, 0x41, 0x01, 0x22, 0x20, 0x0a, 0x16, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xe0, 0x40, 0x14, 0xe8, 0x40, 0x02, 0x22, 0xa8, 0x02, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x1a, 0xe0, 0x40, 0x0c,
	0xe8, 0x40, 0x01, 0xf2, 0x40, 0x11, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x1d, 0xe0, 0x40, 0x15, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x11, 0x55, 0x53, 0x45,
	0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x80, 0x41,
	0x01, 0x22, 0xd9, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x69,
	0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x12, 0xe0, 0x40, 0x0d, 0xe8, 0x40,
	0x01, 0xf2, 0x40, 0x09, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x22, 0xe1, 0x01,
	0x0a, 0x12, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x15, 0xe0, 0x40, 0x16, 0xe8,
	0x40, 0x01, 0xf2, 0x40, 0x09, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x80, 0x41,
	0x01, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74,
	0x69, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x15, 0xe0, 0x40, 0x1e, 0xe8, 0x40, 0x02, 0xf2,
	0x40, 0x09, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x80, 0x41, 0x01, 0x22, 0xfa,
	0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x46,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x4f, 0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x10, 0xe0, 0x40, 0x0e, 0xe8, 0x40,
	0x01, 0xf2, 0x40, 0x07, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x22, 0xe4, 0x01, 0x0a, 0x10,
	0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x73, 0x63, 0x69,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f,
	0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x46, 0x61, 0x6e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x46, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x13, 0xe0,
	0x40, 0x17, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x07, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x80,
	0x41, 0x01, 0x22, 0x99, 0x03, 0x0a, 0x11, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x73, 0x63, 0x69, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61,
	0x73, 0x4f, 0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6f, 0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x46, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x13, 0xe0, 0x40, 0x1f, 0xe8, 0x40,
	0x02, 0xf2, 0x40, 0x07, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x80, 0x41, 0x01, 0x22, 0xd3,
	0x04, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x67, 0x62, 0x12, 0x41, 0x0a, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x21, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x4d, 0x69, 0x72, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4d, 0x69, 0x72, 0x65, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x12, 0xe0, 0x40, 0x0f, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x09, 0x55, 0x53, 0x45, 0x5f, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x22, 0x92, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x72, 0x6d, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x61, 0x72, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x3a, 0x15, 0xe0, 0x40, 0x18, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x09, 0x55, 0x53, 0x45,
	0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x80, 0x41, 0x01, 0x22, 0xb2, 0x07, 0x0a, 0x13, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x52, 0x67, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x62, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x3a, 0x15, 0xe0, 0x40, 0x20, 0xe8, 0x40, 0x02, 0xf2,
	0x40, 0x09, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x80, 0x41, 0x01, 0x22, 0xea,
	0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x13, 0xe0, 0x40, 0x10, 0xe8, 0x40, 0x01, 0xf2, 0x40,
	0x0a, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x22, 0x7a, 0x0a, 0x13, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x16, 0xe0, 0x40, 0x19, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x80, 0x41, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x13, 0xe0, 0x40, 0x11, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x22, 0x55, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40, 0x1a, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x80, 0x41, 0x01, 0x22, 0x56, 0x0a, 0x14, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40, 0x21,
	0xe8, 0x40, 0x02, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x80, 0x41, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x18, 0xe0, 0x40, 0x12, 0xe8,
	0x40, 0x01, 0xf2, 0x40, 0x0f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1b, 0xe0,
	0x40, 0x1b, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x80, 0x41, 0x01, 0x22, 0x60, 0x0a, 0x14, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x75, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3a, 0x06, 0xe0, 0x40, 0x1c, 0xe8, 0x40, 0x02, 0x22, 0x81, 0x01, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x3a, 0x0c, 0xe0, 0x40, 0x1d, 0xe8, 0x40, 0x01, 0xf8, 0x40, 0x00, 0x80, 0x41, 0x00,
	0x22, 0x2f, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xe0, 0x40, 0x22, 0xe8, 0x40,
	0x02, 0x22, 0x41, 0x0a, 0x17, 0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x1c, 0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a,
	0x09, 0xe0, 0x40, 0x23, 0xe8, 0x40, 0x01, 0x80, 0x41, 0x01, 0x22, 0x2d, 0x0a, 0x23, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x3a, 0x06, 0xe0, 0x40, 0x26, 0xe8, 0x40, 0x02, 0x22, 0x68, 0x0a, 0x23, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x3a, 0x06, 0xe0, 0x40, 0x27,
	0xe8, 0x40, 0x01, 0x22, 0x78, 0x0a, 0x1a, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x3a, 0x09, 0xe0, 0x40, 0x28, 0xe8, 0x40, 0x02, 0x80, 0x41, 0x01, 0x22, 0x18, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a,
	0x06, 0xe0, 0x40, 0x24, 0xe8, 0x40, 0x00, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a,
	0x09, 0xe0, 0x40, 0x25, 0xe8, 0x40, 0x00, 0x80, 0x41, 0x01, 0x22, 0x57, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x3a, 0x06, 0xe0, 0x40,
	0x29, 0xe8, 0x40, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x49, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x42,
	0x02, 0x10, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x22, 0x61, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x3a, 0x09, 0xe0, 0x40, 0x2a, 0xe8,
	0x40, 0x02, 0x80, 0x41, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x19, 0xe0, 0x40, 0x2b, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x10, 0x55,
	0x53, 0x45, 0x5f, 0x45, 0x53, 0x50, 0x33, 0x32, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x22,
	0x6a, 0x0a, 0x13, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x3a, 0x19, 0xe0, 0x40, 0x2c, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x10, 0x55, 0x53, 0x45, 0x5f, 0x45,
	0x53, 0x50, 0x33, 0x32, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x22, 0x62, 0x0a, 0x12, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x3a, 0x1c, 0xe0, 0x40, 0x2d, 0xe8, 0x40, 0x02, 0xf2, 0x40, 0x10, 0x55, 0x53, 0x45, 0x5f,
	0x45, 0x53, 0x50, 0x33, 0x32, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x80, 0x41, 0x01, 0x22,
	0xc9, 0x07, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x50, 0x0a, 0x25, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x77, 0x6f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x77, 0x61, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6c, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x14, 0xe0, 0x40, 0x2e, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0b,
	0x55, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x22, 0xcd, 0x04, 0x0a, 0x14,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x41, 0x77, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x3a, 0x17, 0xe0, 0x40, 0x2f, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0b, 0x55, 0x53, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x80, 0x41, 0x01, 0x22, 0xac, 0x07, 0x0a, 0x15,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68,
	0x61, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x1b,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x68, 0x61, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x77, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x08, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x68, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x3a, 0x17, 0xe0, 0x40, 0x30, 0xe8, 0x40, 0x02, 0xf2, 0x40, 0x0b, 0x55, 0x53, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x80, 0x41, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x13, 0xe0, 0x40, 0x31,
	0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x22, 0x7a, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40, 0x32, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55,
	0x53, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x80, 0x41, 0x01, 0x22, 0x56, 0x0a, 0x14,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40,
	0x33, 0xe8, 0x40, 0x02, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x80, 0x41, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x13, 0xe0, 0x40, 0x34, 0xe8, 0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x22, 0x7a, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40, 0x35, 0xe8,
	0x40, 0x01, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x80,
	0x41, 0x01, 0x22, 0x56, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x16, 0xe0, 0x40, 0x36, 0xe8, 0x40, 0x02, 0xf2, 0x40, 0x0a, 0x55, 0x53, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x80, 0x41, 0x01, 0x2a, 0x4e, 0x0a, 0x10, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x6a, 0x0a, 0x0e, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x72, 0x0a, 0x12, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x08, 0x46, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0c, 0x46, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x67, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x2a, 0x55, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x56,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x2a, 0xb9, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x42,
	0x4f, 0x53, 0x45, 0x10, 0x07, 0x2a, 0x84, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x2a, 0xb5, 0x01, 0x0a,
	0x0b, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x4e,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x59, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x06, 0x2a, 0xda, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e,
	0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4d,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x55, 0x53, 0x45, 0x10,
	0x08, 0x2a, 0x7b, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f,
	0x54, 0x48, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xab,
	0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x4d,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x59, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x06, 0x2a, 0xdf, 0x01, 0x0a,
	0x0d, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x45, 0x43, 0x4f, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x07, 0x32, 0xc9,
	0x08, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0d, 0x2e, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xf0, 0x40, 0x00, 0xf8, 0x40, 0x00,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xf0, 0x40, 0x00, 0xf8, 0x40, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xf0,
	0x40, 0x00, 0xf8, 0x40, 0x00, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xf0, 0x40, 0x00, 0xf8,
	0x40, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0xf8, 0x40, 0x00, 0x12,
	0x2e, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x14, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x15, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05,
	0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0xf8,
	0x40, 0x00, 0x12, 0x32, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e,
	0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e,
	0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e,
	0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x05, 0x2e, 0x76, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_api_proto_goTypes = []interface{}{
	(LegacyCoverState)(0),                         // 0: LegacyCoverState
	(CoverOperation)(0),                           // 1: CoverOperation
	(LegacyCoverCommand)(0),                       // 2: LegacyCoverCommand
	(FanSpeed)(0),                                 // 3: FanSpeed
	(FanDirection)(0),                             // 4: FanDirection
	(SensorStateClass)(0),                         // 5: SensorStateClass
	(SensorLastResetType)(0),                      // 6: SensorLastResetType
	(LogLevel)(0),                                 // 7: LogLevel
	(ServiceArgType)(0),                           // 8: ServiceArgType
	(ClimateMode)(0),                              // 9: ClimateMode
	(ClimateFanMode)(0),                           // 10: ClimateFanMode
	(ClimateSwingMode)(0),                         // 11: ClimateSwingMode
	(ClimateAction)(0),                            // 12: ClimateAction
	(ClimatePreset)(0),                            // 13: ClimatePreset
	(*HelloRequest)(nil),                          // 14: HelloRequest
	(*HelloResponse)(nil),                         // 15: HelloResponse
	(*ConnectRequest)(nil),                        // 16: ConnectRequest
	(*ConnectResponse)(nil),                       // 17: ConnectResponse
	(*DisconnectRequest)(nil),                     // 18: DisconnectRequest
	(*DisconnectResponse)(nil),                    // 19: DisconnectResponse
	(*PingRequest)(nil),                           // 20: PingRequest
	(*PingResponse)(nil),                          // 21: PingResponse
	(*DeviceInfoRequest)(nil),                     // 22: DeviceInfoRequest
	(*DeviceInfoResponse)(nil),                    // 23: DeviceInfoResponse
	(*ListEntitiesRequest)(nil),                   // 24: ListEntitiesRequest
	(*ListEntitiesDoneResponse)(nil),              // 25: ListEntitiesDoneResponse
	(*SubscribeStatesRequest)(nil),                // 26: SubscribeStatesRequest
	(*ListEntitiesBinarySensorResponse)(nil),      // 27: ListEntitiesBinarySensorResponse
	(*BinarySensorStateResponse)(nil),             // 28: BinarySensorStateResponse
	(*ListEntitiesCoverResponse)(nil),             // 29: ListEntitiesCoverResponse
	(*CoverStateResponse)(nil),                    // 30: CoverStateResponse
	(*CoverCommandRequest)(nil),                   // 31: CoverCommandRequest
	(*ListEntitiesFanResponse)(nil),               // 32: ListEntitiesFanResponse
	(*FanStateResponse)(nil),                      // 33: FanStateResponse
	(*FanCommandRequest)(nil),                     // 34: FanCommandRequest
	(*ListEntitiesLightResponse)(nil),             // 35: ListEntitiesLightResponse
	(*LightStateResponse)(nil),                    // 36: LightStateResponse
	(*LightCommandRequest)(nil),                   // 37: LightCommandRequest
	(*ListEntitiesSensorResponse)(nil),            // 38: ListEntitiesSensorResponse
	(*SensorStateResponse)(nil),                   // 39: SensorStateResponse
	(*ListEntitiesSwitchResponse)(nil),            // 40: ListEntitiesSwitchResponse
	(*SwitchStateResponse)(nil),                   // 41: SwitchStateResponse
	(*SwitchCommandRequest)(nil),                  // 42: SwitchCommandRequest
	(*ListEntitiesTextSensorResponse)(nil),        // 43: ListEntitiesTextSensorResponse
	(*TextSensorStateResponse)(nil),               // 44: TextSensorStateResponse
	(*SubscribeLogsRequest)(nil),                  // 45: SubscribeLogsRequest
	(*SubscribeLogsResponse)(nil),                 // 46: SubscribeLogsResponse
	(*SubscribeHomeassistantServicesRequest)(nil), // 47: SubscribeHomeassistantServicesRequest
	(*HomeassistantServiceMap)(nil),               // 48: HomeassistantServiceMap
	(*HomeassistantServiceResponse)(nil),          // 49: HomeassistantServiceResponse
	(*SubscribeHomeAssistantStatesRequest)(nil),   // 50: SubscribeHomeAssistantStatesRequest
	(*SubscribeHomeAssistantStateResponse)(nil),   // 51: SubscribeHomeAssistantStateResponse
	(*HomeAssistantStateResponse)(nil),            // 52: HomeAssistantStateResponse
	(*GetTimeRequest)(nil),                        // 53: GetTimeRequest
	(*GetTimeResponse)(nil),                       // 54: GetTimeResponse
	(*ListEntitiesServicesArgument)(nil),          // 55: ListEntitiesServicesArgument
	(*ListEntitiesServicesResponse)(nil),          // 56: ListEntitiesServicesResponse
	(*ExecuteServiceArgument)(nil),                // 57: ExecuteServiceArgument
	(*ExecuteServiceRequest)(nil),                 // 58: ExecuteServiceRequest
	(*ListEntitiesCameraResponse)(nil),            // 59: ListEntitiesCameraResponse
	(*CameraImageResponse)(nil),                   // 60: CameraImageResponse
	(*CameraImageRequest)(nil),                    // 61: CameraImageRequest
	(*ListEntitiesClimateResponse)(nil),           // 62: ListEntitiesClimateResponse
	(*ClimateStateResponse)(nil),                  // 63: ClimateStateResponse
	(*ClimateCommandRequest)(nil),                 // 64: ClimateCommandRequest
	(*ListEntitiesNumberResponse)(nil),            // 65: ListEntitiesNumberResponse
	(*NumberStateResponse)(nil),                   // 66: NumberStateResponse
	(*NumberCommandRequest)(nil),                  // 67: NumberCommandRequest
	(*ListEntitiesSelectResponse)(nil),            // 68: ListEntitiesSelectResponse
	(*SelectStateResponse)(nil),                   // 69: SelectStateResponse
	(*SelectCommandRequest)(nil),                  // 70: SelectCommandRequest
	(*Void)(nil),                                  // 71: void
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: CoverStateResponse.legacy_state:type_name -> LegacyCoverState
	1,  // 1: CoverStateResponse.current_operation:type_name -> CoverOperation
	2,  // 2: CoverCommandRequest.legacy_command:type_name -> LegacyCoverCommand
	3,  // 3: FanStateResponse.speed:type_name -> FanSpeed
	4,  // 4: FanStateResponse.direction:type_name -> FanDirection
	3,  // 5: FanCommandRequest.speed:type_name -> FanSpeed
	4,  // 6: FanCommandRequest.direction:type_name -> FanDirection
	5,  // 7: ListEntitiesSensorResponse.state_class:type_name -> SensorStateClass
	6,  // 8: ListEntitiesSensorResponse.last_reset_type:type_name -> SensorLastResetType
	7,  // 9: SubscribeLogsRequest.level:type_name -> LogLevel
	7,  // 10: SubscribeLogsResponse.level:type_name -> LogLevel
	48, // 11: HomeassistantServiceResponse.data:type_name -> HomeassistantServiceMap
	48, // 12: HomeassistantServiceResponse.data_template:type_name -> HomeassistantServiceMap
	48, // 13: HomeassistantServiceResponse.variables:type_name -> HomeassistantServiceMap
	8,  // 14: ListEntitiesServicesArgument.type:type_name -> ServiceArgType
	55, // 15: ListEntitiesServicesResponse.args:type_name -> ListEntitiesServicesArgument
	57, // 16: ExecuteServiceRequest.args:type_name -> ExecuteServiceArgument
	9,  // 17: ListEntitiesClimateResponse.supported_modes:type_name -> ClimateMode
	10, // 18: ListEntitiesClimateResponse.supported_fan_modes:type_name -> ClimateFanMode
	11, // 19: ListEntitiesClimateResponse.supported_swing_modes:type_name -> ClimateSwingMode
	13, // 20: ListEntitiesClimateResponse.supported_presets:type_name -> ClimatePreset
	9,  // 21: ClimateStateResponse.mode:type_name -> ClimateMode
	12, // 22: ClimateStateResponse.action:type_name -> ClimateAction
	10, // 23: ClimateStateResponse.fan_mode:type_name -> ClimateFanMode
	11, // 24: ClimateStateResponse.swing_mode:type_name -> ClimateSwingMode
	13, // 25: ClimateStateResponse.preset:type_name -> ClimatePreset
	9,  // 26: ClimateCommandRequest.mode:type_name -> ClimateMode
	10, // 27: ClimateCommandRequest.fan_mode:type_name -> ClimateFanMode
	11, // 28: ClimateCommandRequest.swing_mode:type_name -> ClimateSwingMode
	13, // 29: ClimateCommandRequest.preset:type_name -> ClimatePreset
	14, // 30: APIConnection.hello:input_type -> HelloRequest
	16, // 31: APIConnection.connect:input_type -> ConnectRequest
	18, // 32: APIConnection.disconnect:input_type -> DisconnectRequest
	20, // 33: APIConnection.ping:input_type -> PingRequest
	22, // 34: APIConnection.device_info:input_type -> DeviceInfoRequest
	24, // 35: APIConnection.list_entities:input_type -> ListEntitiesRequest
	26, // 36: APIConnection.subscribe_states:input_type -> SubscribeStatesRequest
	45, // 37: APIConnection.subscribe_logs:input_type -> SubscribeLogsRequest
	47, // 38: APIConnection.subscribe_homeassistant_services:input_type -> SubscribeHomeassistantServicesRequest
	50, // 39: APIConnection.subscribe_home_assistant_states:input_type -> SubscribeHomeAssistantStatesRequest
	53, // 40: APIConnection.get_time:input_type -> GetTimeRequest
	58, // 41: APIConnection.execute_service:input_type -> ExecuteServiceRequest
	31, // 42: APIConnection.cover_command:input_type -> CoverCommandRequest
	34, // 43: APIConnection.fan_command:input_type -> FanCommandRequest
	37, // 44: APIConnection.light_command:input_type -> LightCommandRequest
	42, // 45: APIConnection.switch_command:input_type -> SwitchCommandRequest
	61, // 46: APIConnection.camera_image:input_type -> CameraImageRequest
	64, // 47: APIConnection.climate_command:input_type -> ClimateCommandRequest
	67, // 48: APIConnection.number_command:input_type -> NumberCommandRequest
	70, // 49: APIConnection.select_command:input_type -> SelectCommandRequest
	15, // 50: APIConnection.hello:output_type -> HelloResponse
	17, // 51: APIConnection.connect:output_type -> ConnectResponse
	19, // 52: APIConnection.disconnect:output_type -> DisconnectResponse
	21, // 53: APIConnection.ping:output_type -> PingResponse
	23, // 54: APIConnection.device_info:output_type -> DeviceInfoResponse
	71, // 55: APIConnection.list_entities:output_type -> void
	71, // 56: APIConnection.subscribe_states:output_type -> void
	71, // 57: APIConnection.subscribe_logs:output_type -> void
	71, // 58: APIConnection.subscribe_homeassistant_services:output_type -> void
	71, // 59: APIConnection.subscribe_home_assistant_states:output_type -> void
	54, // 60: APIConnection.get_time:output_type -> GetTimeResponse
	71, // 61: APIConnection.execute_service:output_type -> void
	71, // 62: APIConnection.cover_command:output_type -> void
	71, // 63: APIConnection.fan_command:output_type -> void
	71, // 64: APIConnection.light_command:output_type -> void
	71, // 65: APIConnection.switch_command:output_type -> void
	71, // 66: APIConnection.camera_image:output_type -> void
	71, // 67: APIConnection.climate_command:output_type -> void
	71, // 68: APIConnection.number_command:output_type -> void
	71, // 69: APIConnection.select_command:output_type -> void
	50, // [50:70] is the sub-list for method output_type
	30, // [30:50] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	file_api_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesBinarySensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinarySensorStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesCoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesFanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesLightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesSwitchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesTextSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextSensorStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeHomeassistantServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeassistantServiceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeassistantServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeHomeAssistantStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeHomeAssistantStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeAssistantStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesServicesArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteServiceArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesClimateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimateStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClimateCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntitiesSelectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
